"use strict";(self.webpackChunk_detekt_website=self.webpackChunk_detekt_website||[]).push([[2690],{25124:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"rules/style","title":"Style Rule Set","description":"The Style ruleset provides rules that assert the style of the code.","source":"@site/versioned_docs/version-1.23.6/rules/style.md","sourceDirName":"rules","slug":"/rules/style","permalink":"/docs/1.23.6/rules/style","draft":false,"unlisted":false,"editUrl":"https://github.com/detekt/detekt/edit/main/website/versioned_docs/version-1.23.6/rules/style.md","tags":[],"version":"1.23.6","frontMatter":{"title":"Style Rule Set","sidebar":"home_sidebar","keywords":["rules","style"],"permalink":"style.html","toc":true,"folder":"documentation"},"sidebar":"defaultSidebar","previous":{"title":"Ruleauthors Rule Set","permalink":"/docs/1.23.6/rules/ruleauthors"}}');var s=i(74848),o=i(28453);const t={title:"Style Rule Set",sidebar:"home_sidebar",keywords:["rules","style"],permalink:"style.html",toc:!0,folder:"documentation"},a=void 0,d={},c=[{value:"AlsoCouldBeApply",id:"alsocouldbeapply",level:3},{value:"Noncompliant Code:",id:"noncompliant-code",level:4},{value:"Compliant Code:",id:"compliant-code",level:4},{value:"BracesOnIfStatements",id:"bracesonifstatements",level:3},{value:"Configuration options:",id:"configuration-options",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-1",level:4},{value:"Compliant Code:",id:"compliant-code-1",level:4},{value:"BracesOnWhenStatements",id:"bracesonwhenstatements",level:3},{value:"Configuration options:",id:"configuration-options-1",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-2",level:4},{value:"Compliant Code:",id:"compliant-code-2",level:4},{value:"CanBeNonNullable",id:"canbenonnullable",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-3",level:4},{value:"Compliant Code:",id:"compliant-code-3",level:4},{value:"CascadingCallWrapping",id:"cascadingcallwrapping",level:3},{value:"Configuration options:",id:"configuration-options-2",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-4",level:4},{value:"Compliant Code:",id:"compliant-code-4",level:4},{value:"ClassOrdering",id:"classordering",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-5",level:4},{value:"Compliant Code:",id:"compliant-code-5",level:4},{value:"CollapsibleIfStatements",id:"collapsibleifstatements",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-6",level:4},{value:"Compliant Code:",id:"compliant-code-6",level:4},{value:"DataClassContainsFunctions",id:"dataclasscontainsfunctions",level:3},{value:"Configuration options:",id:"configuration-options-3",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-7",level:4},{value:"DataClassShouldBeImmutable",id:"dataclassshouldbeimmutable",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-8",level:4},{value:"Compliant Code:",id:"compliant-code-7",level:4},{value:"DestructuringDeclarationWithTooManyEntries",id:"destructuringdeclarationwithtoomanyentries",level:3},{value:"Configuration options:",id:"configuration-options-4",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-9",level:4},{value:"Compliant Code:",id:"compliant-code-8",level:4},{value:"DoubleNegativeLambda",id:"doublenegativelambda",level:3},{value:"Configuration options:",id:"configuration-options-5",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-10",level:4},{value:"Compliant Code:",id:"compliant-code-9",level:4},{value:"EqualsNullCall",id:"equalsnullcall",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-11",level:4},{value:"Compliant Code:",id:"compliant-code-10",level:4},{value:"EqualsOnSignatureLine",id:"equalsonsignatureline",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-12",level:4},{value:"Compliant Code:",id:"compliant-code-11",level:4},{value:"ExplicitCollectionElementAccessMethod",id:"explicitcollectionelementaccessmethod",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-13",level:4},{value:"Compliant Code:",id:"compliant-code-12",level:4},{value:"ExplicitItLambdaParameter",id:"explicititlambdaparameter",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-14",level:4},{value:"Compliant Code:",id:"compliant-code-13",level:4},{value:"ExpressionBodySyntax",id:"expressionbodysyntax",level:3},{value:"Configuration options:",id:"configuration-options-6",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-15",level:4},{value:"Compliant Code:",id:"compliant-code-14",level:4},{value:"ForbiddenAnnotation",id:"forbiddenannotation",level:3},{value:"Configuration options:",id:"configuration-options-7",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-16",level:4},{value:"Compliant Code:",id:"compliant-code-15",level:4},{value:"ForbiddenComment",id:"forbiddencomment",level:3},{value:"Configuration options:",id:"configuration-options-8",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-17",level:4},{value:"ForbiddenImport",id:"forbiddenimport",level:3},{value:"Configuration options:",id:"configuration-options-9",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-18",level:4},{value:"ForbiddenMethodCall",id:"forbiddenmethodcall",level:3},{value:"Configuration options:",id:"configuration-options-10",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-19",level:4},{value:"ForbiddenSuppress",id:"forbiddensuppress",level:3},{value:"Configuration options:",id:"configuration-options-11",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-20",level:4},{value:"Compliant Code:",id:"compliant-code-16",level:4},{value:"ForbiddenVoid",id:"forbiddenvoid",level:3},{value:"Configuration options:",id:"configuration-options-12",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-21",level:4},{value:"Compliant Code:",id:"compliant-code-17",level:4},{value:"FunctionOnlyReturningConstant",id:"functiononlyreturningconstant",level:3},{value:"Configuration options:",id:"configuration-options-13",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-22",level:4},{value:"Compliant Code:",id:"compliant-code-18",level:4},{value:"LoopWithTooManyJumpStatements",id:"loopwithtoomanyjumpstatements",level:3},{value:"Configuration options:",id:"configuration-options-14",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-23",level:4},{value:"MagicNumber",id:"magicnumber",level:3},{value:"Configuration options:",id:"configuration-options-15",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-24",level:4},{value:"Compliant Code:",id:"compliant-code-19",level:4},{value:"MandatoryBracesLoops",id:"mandatorybracesloops",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-25",level:4},{value:"Compliant Code:",id:"compliant-code-20",level:4},{value:"MaxChainedCallsOnSameLine",id:"maxchainedcallsonsameline",level:3},{value:"Configuration options:",id:"configuration-options-16",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-26",level:4},{value:"Compliant Code:",id:"compliant-code-21",level:4},{value:"MaxLineLength",id:"maxlinelength",level:3},{value:"Configuration options:",id:"configuration-options-17",level:4},{value:"MayBeConst",id:"maybeconst",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-27",level:4},{value:"Compliant Code:",id:"compliant-code-22",level:4},{value:"ModifierOrder",id:"modifierorder",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-28",level:4},{value:"Compliant Code:",id:"compliant-code-23",level:4},{value:"MultilineLambdaItParameter",id:"multilinelambdaitparameter",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-29",level:4},{value:"Compliant Code:",id:"compliant-code-24",level:4},{value:"MultilineRawStringIndentation",id:"multilinerawstringindentation",level:3},{value:"Configuration options:",id:"configuration-options-18",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-30",level:4},{value:"Compliant Code:",id:"compliant-code-25",level:4},{value:"NestedClassesVisibility",id:"nestedclassesvisibility",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-31",level:4},{value:"Compliant Code:",id:"compliant-code-26",level:4},{value:"NewLineAtEndOfFile",id:"newlineatendoffile",level:3},{value:"NoTabs",id:"notabs",level:3},{value:"NullableBooleanCheck",id:"nullablebooleancheck",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-32",level:4},{value:"Compliant Code:",id:"compliant-code-27",level:4},{value:"ObjectLiteralToLambda",id:"objectliteraltolambda",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-33",level:4},{value:"Compliant Code:",id:"compliant-code-28",level:4},{value:"OptionalAbstractKeyword",id:"optionalabstractkeyword",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-34",level:4},{value:"Compliant Code:",id:"compliant-code-29",level:4},{value:"OptionalUnit",id:"optionalunit",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-35",level:4},{value:"Compliant Code:",id:"compliant-code-30",level:4},{value:"<del>OptionalWhenBraces</del>",id:"optionalwhenbraces",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-36",level:4},{value:"Compliant Code:",id:"compliant-code-31",level:4},{value:"PreferToOverPairSyntax",id:"prefertooverpairsyntax",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-37",level:4},{value:"Compliant Code:",id:"compliant-code-32",level:4},{value:"ProtectedMemberInFinalClass",id:"protectedmemberinfinalclass",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-38",level:4},{value:"Compliant Code:",id:"compliant-code-33",level:4},{value:"RedundantExplicitType",id:"redundantexplicittype",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-39",level:4},{value:"Compliant Code:",id:"compliant-code-34",level:4},{value:"RedundantHigherOrderMapUsage",id:"redundanthigherordermapusage",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-40",level:4},{value:"Compliant Code:",id:"compliant-code-35",level:4},{value:"RedundantVisibilityModifierRule",id:"redundantvisibilitymodifierrule",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-41",level:4},{value:"Compliant Code:",id:"compliant-code-36",level:4},{value:"ReturnCount",id:"returncount",level:3},{value:"Configuration options:",id:"configuration-options-19",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-42",level:4},{value:"Compliant Code:",id:"compliant-code-37",level:4},{value:"SafeCast",id:"safecast",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-43",level:4},{value:"Compliant Code:",id:"compliant-code-38",level:4},{value:"SerialVersionUIDInSerializableClass",id:"serialversionuidinserializableclass",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-44",level:4},{value:"Compliant Code:",id:"compliant-code-39",level:4},{value:"SpacingBetweenPackageAndImports",id:"spacingbetweenpackageandimports",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-45",level:4},{value:"Compliant Code:",id:"compliant-code-40",level:4},{value:"StringShouldBeRawString",id:"stringshouldberawstring",level:3},{value:"Configuration options:",id:"configuration-options-20",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-46",level:4},{value:"Compliant Code:",id:"compliant-code-41",level:4},{value:"ThrowsCount",id:"throwscount",level:3},{value:"Configuration options:",id:"configuration-options-21",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-47",level:4},{value:"Compliant Code:",id:"compliant-code-42",level:4},{value:"TrailingWhitespace",id:"trailingwhitespace",level:3},{value:"TrimMultilineRawString",id:"trimmultilinerawstring",level:3},{value:"Configuration options:",id:"configuration-options-22",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-48",level:4},{value:"Compliant Code:",id:"compliant-code-43",level:4},{value:"UnderscoresInNumericLiterals",id:"underscoresinnumericliterals",level:3},{value:"Configuration options:",id:"configuration-options-23",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-49",level:4},{value:"Compliant Code:",id:"compliant-code-44",level:4},{value:"UnnecessaryAbstractClass",id:"unnecessaryabstractclass",level:3},{value:"Configuration options:",id:"configuration-options-24",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-50",level:4},{value:"Compliant Code:",id:"compliant-code-45",level:4},{value:"UnnecessaryAnnotationUseSiteTarget",id:"unnecessaryannotationusesitetarget",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-51",level:4},{value:"Compliant Code:",id:"compliant-code-46",level:4},{value:"UnnecessaryApply",id:"unnecessaryapply",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-52",level:4},{value:"Compliant Code:",id:"compliant-code-47",level:4},{value:"UnnecessaryBackticks",id:"unnecessarybackticks",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-53",level:4},{value:"Compliant Code:",id:"compliant-code-48",level:4},{value:"UnnecessaryBracesAroundTrailingLambda",id:"unnecessarybracesaroundtrailinglambda",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-54",level:4},{value:"Compliant Code:",id:"compliant-code-49",level:4},{value:"UnnecessaryFilter",id:"unnecessaryfilter",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-55",level:4},{value:"Compliant Code:",id:"compliant-code-50",level:4},{value:"UnnecessaryInheritance",id:"unnecessaryinheritance",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-56",level:4},{value:"UnnecessaryInnerClass",id:"unnecessaryinnerclass",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-57",level:4},{value:"UnnecessaryLet",id:"unnecessarylet",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-58",level:4},{value:"Compliant Code:",id:"compliant-code-51",level:4},{value:"UnnecessaryParentheses",id:"unnecessaryparentheses",level:3},{value:"Configuration options:",id:"configuration-options-25",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-59",level:4},{value:"Compliant Code:",id:"compliant-code-52",level:4},{value:"UntilInsteadOfRangeTo",id:"untilinsteadofrangeto",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-60",level:4},{value:"Compliant Code:",id:"compliant-code-53",level:4},{value:"UnusedImports",id:"unusedimports",level:3},{value:"UnusedParameter",id:"unusedparameter",level:3},{value:"Configuration options:",id:"configuration-options-26",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-61",level:4},{value:"Compliant Code:",id:"compliant-code-54",level:4},{value:"UnusedPrivateClass",id:"unusedprivateclass",level:3},{value:"UnusedPrivateMember",id:"unusedprivatemember",level:3},{value:"Configuration options:",id:"configuration-options-27",level:4},{value:"UnusedPrivateProperty",id:"unusedprivateproperty",level:3},{value:"Configuration options:",id:"configuration-options-28",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-62",level:4},{value:"Compliant Code:",id:"compliant-code-55",level:4},{value:"UseAnyOrNoneInsteadOfFind",id:"useanyornoneinsteadoffind",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-63",level:4},{value:"Compliant Code:",id:"compliant-code-56",level:4},{value:"UseArrayLiteralsInAnnotations",id:"usearrayliteralsinannotations",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-64",level:4},{value:"Compliant Code:",id:"compliant-code-57",level:4},{value:"UseCheckNotNull",id:"usechecknotnull",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-65",level:4},{value:"Compliant Code:",id:"compliant-code-58",level:4},{value:"UseCheckOrError",id:"usecheckorerror",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-66",level:4},{value:"Compliant Code:",id:"compliant-code-59",level:4},{value:"UseDataClass",id:"usedataclass",level:3},{value:"Configuration options:",id:"configuration-options-29",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-67",level:4},{value:"Compliant Code:",id:"compliant-code-60",level:4},{value:"UseEmptyCounterpart",id:"useemptycounterpart",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-68",level:4},{value:"Compliant Code:",id:"compliant-code-61",level:4},{value:"UseIfEmptyOrIfBlank",id:"useifemptyorifblank",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-69",level:4},{value:"Compliant Code:",id:"compliant-code-62",level:4},{value:"UseIfInsteadOfWhen",id:"useifinsteadofwhen",level:3},{value:"Configuration options:",id:"configuration-options-30",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-70",level:4},{value:"Compliant Code:",id:"compliant-code-63",level:4},{value:"UseIsNullOrEmpty",id:"useisnullorempty",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-71",level:4},{value:"Compliant Code:",id:"compliant-code-64",level:4},{value:"UseLet",id:"uselet",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-72",level:4},{value:"Compliant Code:",id:"compliant-code-65",level:4},{value:"UseOrEmpty",id:"useorempty",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-73",level:4},{value:"Compliant Code:",id:"compliant-code-66",level:4},{value:"UseRequire",id:"userequire",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-74",level:4},{value:"Compliant Code:",id:"compliant-code-67",level:4},{value:"UseRequireNotNull",id:"userequirenotnull",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-75",level:4},{value:"Compliant Code:",id:"compliant-code-68",level:4},{value:"UseSumOfInsteadOfFlatMapSize",id:"usesumofinsteadofflatmapsize",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-76",level:4},{value:"Compliant Code:",id:"compliant-code-69",level:4},{value:"UselessCallOnNotNull",id:"uselesscallonnotnull",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-77",level:4},{value:"Compliant Code:",id:"compliant-code-70",level:4},{value:"UtilityClassWithPublicConstructor",id:"utilityclasswithpublicconstructor",level:3},{value:"Noncompliant Code:",id:"noncompliant-code-78",level:4},{value:"Compliant Code:",id:"compliant-code-71",level:4},{value:"VarCouldBeVal",id:"varcouldbeval",level:3},{value:"Configuration options:",id:"configuration-options-31",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-79",level:4},{value:"Compliant Code:",id:"compliant-code-72",level:4},{value:"WildcardImport",id:"wildcardimport",level:3},{value:"Configuration options:",id:"configuration-options-32",level:4},{value:"Noncompliant Code:",id:"noncompliant-code-80",level:4},{value:"Compliant Code:",id:"compliant-code-73",level:4}];function r(e){const n={a:"a",code:"code",del:"del",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The Style ruleset provides rules that assert the style of the code.\nThis will help keep code in line with the given\ncode style guidelines."}),"\n",(0,s.jsx)(n.h3,{id:"alsocouldbeapply",children:"AlsoCouldBeApply"}),"\n",(0,s.jsxs)(n.p,{children:["Detects when an ",(0,s.jsx)(n.code,{children:"also"})," block contains only ",(0,s.jsx)(n.code,{children:"it"}),"-started expressions."]}),"\n",(0,s.jsxs)(n.p,{children:["By refactoring the ",(0,s.jsx)(n.code,{children:"also"})," block to an ",(0,s.jsx)(n.code,{children:"apply"})," block makes it so that all ",(0,s.jsx)(n.code,{children:"it"}),"s can be removed\nthus making the block more concise and easier to read."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"Buzz().also {\nit.init()\nit.block()\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"Buzz().apply {\ninit()\nblock()\n}\n\n// Also compliant\nfun foo(a: Int): Int {\nreturn a.also { println(it) }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bracesonifstatements",children:"BracesOnIfStatements"}),"\n",(0,s.jsxs)(n.p,{children:["This rule detects ",(0,s.jsx)(n.code,{children:"if"})," statements which do not comply with the specified rules.\nKeeping braces consistent will improve readability and avoid possible errors."]}),"\n",(0,s.jsx)(n.p,{children:"The available options are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"always"}),": forces braces on all ",(0,s.jsx)(n.code,{children:"if"})," and ",(0,s.jsx)(n.code,{children:"else"})," branches in the whole codebase."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"consistent"}),": ensures that braces are consistent within each ",(0,s.jsx)(n.code,{children:"if"}),"-",(0,s.jsx)(n.code,{children:"else if"}),"-",(0,s.jsx)(n.code,{children:"else"})," chain.\nIf there's a brace on one of the branches, all branches should have it."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"necessary"}),": forces no braces on any ",(0,s.jsx)(n.code,{children:"if"})," and ",(0,s.jsx)(n.code,{children:"else"})," branches in the whole codebase\nexcept where necessary for multi-statement branches."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"never"}),": forces no braces on any ",(0,s.jsx)(n.code,{children:"if"})," and ",(0,s.jsx)(n.code,{children:"else"})," branches in the whole codebase."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Single-line if-statement has no line break (\\n):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"if (a) b else c\n"})}),"\n",(0,s.jsx)(n.p,{children:"Multi-line if-statement has at least one line break (\\n):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"if (a) b\nelse c\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"singleLine"})," (default: ",(0,s.jsx)(n.code,{children:"'never'"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"single-line braces policy"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"multiLine"})," (default: ",(0,s.jsx)(n.code,{children:"'always'"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"multi-line braces policy"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-1",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"// singleLine = 'never'\nif (a) { b } else { c }\n\nif (a) { b } else c\n\nif (a) b else { c; d }\n\n// multiLine = 'never'\nif (a) {\n    b\n} else {\n    c\n}\n\n// singleLine = 'always'\nif (a) b else c\n\nif (a) { b } else c\n\n// multiLine = 'always'\nif (a) {\n    b\n} else\n    c\n\n// singleLine = 'consistent'\nif (a) b else { c }\nif (a) b else if (c) d else { e }\n\n// multiLine = 'consistent'\nif (a)\n    b\nelse {\n    c\n}\n\n// singleLine = 'necessary'\nif (a) { b } else { c; d }\n\n// multiLine = 'necessary'\nif (a) {\n    b\n    c\n} else if (d) {\n    e\n} else {\n    f\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-1",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"// singleLine = 'never'\nif (a) b else c\n\n// multiLine = 'never'\nif (a)\n    b\nelse\n    c\n\n// singleLine = 'always'\nif (a) { b } else { c }\n\nif (a) { b } else if (c) { d }\n\n// multiLine = 'always'\nif (a) {\n    b\n} else {\n    c\n}\n\nif (a) {\n    b\n} else if (c) {\n    d\n}\n\n// singleLine = 'consistent'\nif (a) b else c\n\nif (a) { b } else { c }\n\nif (a) { b } else { c; d }\n\n// multiLine = 'consistent'\nif (a) {\n    b\n} else {\n    c\n}\n\nif (a) b\nelse c\n\n// singleLine = 'necessary'\nif (a) b else { c; d }\n\n// multiLine = 'necessary'\nif (a) {\n    b\n    c\n} else if (d)\n    e\nelse\n    f\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bracesonwhenstatements",children:"BracesOnWhenStatements"}),"\n",(0,s.jsxs)(n.p,{children:["This rule detects ",(0,s.jsx)(n.code,{children:"when"})," statements which do not comply with the specified policy.\nKeeping braces consistent will improve readability and avoid possible errors."]}),"\n",(0,s.jsxs)(n.p,{children:["Single-line ",(0,s.jsx)(n.code,{children:"when"})," statement is:\na ",(0,s.jsx)(n.code,{children:"when"})," where each of the branches are single-line (has no line breaks ",(0,s.jsx)(n.code,{children:"\\n"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Multi-line ",(0,s.jsx)(n.code,{children:"when"})," statement is:\na ",(0,s.jsx)(n.code,{children:"when"})," where at least one of the branches is multi-line (has a break line ",(0,s.jsx)(n.code,{children:"\\n"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"Available options are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"never"}),": forces no braces on any branch.\n",(0,s.jsx)(n.em,{children:"Tip"}),': this is very strict, it will force a simple expression, like a single function call / expression.\nExtracting a function for "complex" logic is one way to adhere to this policy.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"necessary"}),": forces no braces on any branch except where necessary for multi-statement branches."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"consistent"}),": ensures that braces are consistent within ",(0,s.jsx)(n.code,{children:"when"})," statement.\nIf there are braces on one of the branches, all branches should have it."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"always"}),": forces braces on all branches."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-1",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"singleLine"})," (default: ",(0,s.jsx)(n.code,{children:"'necessary'"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"single-line braces policy"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"multiLine"})," (default: ",(0,s.jsx)(n.code,{children:"'consistent'"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"multi-line braces policy"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-2",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"// singleLine = 'never'\nwhen (a) {\n    1 -> { f1() } // Not allowed.\n    2 -> f2()\n}\n// multiLine = 'never'\nwhen (a) {\n    1 -> { // Not allowed.\n        f1()\n    }\n    2 -> f2()\n}\n// singleLine = 'necessary'\nwhen (a) {\n    1 -> { f1() } // Unnecessary braces.\n    2 -> f2()\n}\n// multiLine = 'necessary'\nwhen (a) {\n    1 -> { // Unnecessary braces.\n        f1()\n    }\n    2 -> f2()\n}\n\n// singleLine = 'consistent'\nwhen (a) {\n    1 -> { f1() }\n    2 -> f2()\n}\n// multiLine = 'consistent'\nwhen (a) {\n    1 ->\n        f1() // Missing braces.\n    2 -> {\n        f2()\n        f3()\n    }\n}\n\n// singleLine = 'always'\nwhen (a) {\n    1 -> { f1() }\n    2 -> f2() // Missing braces.\n}\n// multiLine = 'always'\nwhen (a) {\n    1 ->\n        f1() // Missing braces.\n    2 -> {\n        f2()\n        f3()\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-2",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"// singleLine = 'never'\nwhen (a) {\n    1 -> f1()\n    2 -> f2()\n}\n// multiLine = 'never'\nwhen (a) {\n    1 ->\n        f1()\n    2 -> f2()\n}\n// singleLine = 'necessary'\nwhen (a) {\n    1 -> f1()\n    2 -> { f2(); f3() } // Necessary braces because of multiple statements.\n}\n// multiLine = 'necessary'\nwhen (a) {\n    1 ->\n        f1()\n    2 -> { // Necessary braces because of multiple statements.\n        f2()\n        f3()\n    }\n}\n\n// singleLine = 'consistent'\nwhen (a) {\n    1 -> { f1() }\n    2 -> { f2() }\n}\nwhen (a) {\n    1 -> f1()\n    2 -> f2()\n}\n// multiLine = 'consistent'\nwhen (a) {\n    1 -> {\n        f1()\n    }\n    2 -> {\n        f2()\n        f3()\n    }\n}\n\n// singleLine = 'always'\nwhen (a) {\n    1 -> { f1() }\n    2 -> { f2() }\n}\n// multiLine = 'always'\nwhen (a) {\n    1 -> {\n        f1()\n    }\n    2 -> {\n        f2()\n        f3()\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"canbenonnullable",children:"CanBeNonNullable"}),"\n",(0,s.jsx)(n.p,{children:"This rule inspects variables marked as nullable and reports which could be\ndeclared as non-nullable instead."}),"\n",(0,s.jsx)(n.p,{children:'It\'s preferred to not have functions that do "nothing".\nA function that does nothing when the value is null hides the logic,\nso it should not allow null values in the first place.\nIt is better to move the null checks up around the calls,\ninstead of having it inside the function.'}),"\n",(0,s.jsx)(n.p,{children:"This could lead to less nullability overall in the codebase."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-3",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class A {\n    var a: Int? = 5\n\n    fun foo() {\n        a = 6\n    }\n}\n\nclass A {\n    val a: Int?\n        get() = 5\n}\n\nfun foo(a: Int?) {\n    val b = a!! + 2\n}\n\nfun foo(a: Int?) {\n    if (a != null) {\n        println(a)\n    }\n}\n\nfun foo(a: Int?) {\n    if (a == null) return\n    println(a)\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-3",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class A {\n    var a: Int = 5\n\n    fun foo() {\n        a = 6\n    }\n}\n\nclass A {\n    val a: Int\n        get() = 5\n}\n\nfun foo(a: Int) {\n    val b = a + 2\n}\n\nfun foo(a: Int) {\n    println(a)\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cascadingcallwrapping",children:"CascadingCallWrapping"}),"\n",(0,s.jsx)(n.p,{children:"Requires that all chained calls are placed on a new line if a preceding one is."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-2",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"includeElvis"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"require trailing elvis expressions to be wrapped on a new line"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-4",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"foo()\n.bar().baz()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-4",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"foo().bar().baz()\n\nfoo()\n.bar()\n.baz()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"classordering",children:"ClassOrdering"}),"\n",(0,s.jsxs)(n.p,{children:["This rule ensures class contents are ordered as follows as recommended by the Kotlin\n",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/coding-conventions.html#class-layout",children:"Coding Conventions"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Property declarations and initializer blocks"}),"\n",(0,s.jsx)(n.li,{children:"Secondary constructors"}),"\n",(0,s.jsx)(n.li,{children:"Method declarations"}),"\n",(0,s.jsx)(n.li,{children:"Companion object"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-5",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class OutOfOrder {\n    companion object {\n        const val IMPORTANT_VALUE = 3\n    }\n\n    fun returnX(): Int {\n        return x\n    }\n\n    private val x = 2\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-5",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class InOrder {\n    private val x = 2\n\n    fun returnX(): Int {\n        return x\n    }\n\n    companion object {\n        const val IMPORTANT_VALUE = 3\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"collapsibleifstatements",children:"CollapsibleIfStatements"}),"\n",(0,s.jsxs)(n.p,{children:["This rule detects ",(0,s.jsx)(n.code,{children:"if"})," statements which can be collapsed. This can reduce nesting and help improve readability."]}),"\n",(0,s.jsx)(n.p,{children:"However, carefully consider whether merging the if statements actually improves readability, as collapsing the\nstatements may hide some edge cases from the reader."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-6",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val i = 1\nif (i > 0) {\n    if (i < 5) {\n        println(i)\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-6",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val i = 1\nif (i > 0 && i < 5) {\n    println(i)\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dataclasscontainsfunctions",children:"DataClassContainsFunctions"}),"\n",(0,s.jsx)(n.p,{children:"This rule reports functions inside data classes which have not been marked as a conversion function."}),"\n",(0,s.jsxs)(n.p,{children:["Data classes should mainly be used to store data. This rule assumes that they should not contain any extra functions\naside functions that help with converting objects from/to one another.\nData classes will automatically have a generated ",(0,s.jsx)(n.code,{children:"equals"}),", ",(0,s.jsx)(n.code,{children:"toString"})," and ",(0,s.jsx)(n.code,{children:"hashCode"})," function by the compiler."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 20min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-3",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"conversionFunctionPrefix"})," (default: ",(0,s.jsx)(n.code,{children:"['to']"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"allowed conversion function names"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowOperators"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"allows overloading an operator"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-7",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"data class DataClassWithFunctions(val i: Int) {\n    fun foo() { }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dataclassshouldbeimmutable",children:"DataClassShouldBeImmutable"}),"\n",(0,s.jsx)(n.p,{children:"This rule reports mutable properties inside data classes."}),"\n",(0,s.jsx)(n.p,{children:"Data classes should mainly be used to store immutable data. This rule assumes that they should not contain any\nmutable properties."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 20min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-8",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"data class MutableDataClass(var i: Int) {\n    var s: String? = null\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-7",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"data class ImmutableDataClass(\n    val i: Int,\n    val s: String?\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"destructuringdeclarationwithtoomanyentries",children:"DestructuringDeclarationWithTooManyEntries"}),"\n",(0,s.jsx)(n.p,{children:"Destructuring declarations with too many entries are hard to read and understand.\nTo increase readability they should be refactored to reduce the number of entries or avoid using a destructuring\ndeclaration."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-4",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxDestructuringEntries"})," (default: ",(0,s.jsx)(n.code,{children:"3"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"maximum allowed elements in a destructuring declaration"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-9",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"data class TooManyElements(val a: Int, val b: Int, val c: Int, val d: Int)\nval (a, b, c, d) = TooManyElements(1, 2, 3, 4)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-8",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"data class FewerElements(val a: Int, val b: Int, val c: Int)\nval (a, b, c) = TooManyElements(1, 2, 3)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"doublenegativelambda",children:"DoubleNegativeLambda"}),"\n",(0,s.jsxs)(n.p,{children:["Detects negation in lambda blocks where the function name is also in the negative (like ",(0,s.jsx)(n.code,{children:"takeUnless"}),").\nA double negative is harder to read than a positive. In particular, if there are multiple conditions with ",(0,s.jsx)(n.code,{children:"&&"})," etc. inside\nthe lambda, then the reader may need to unpack these using DeMorgan's laws. Consider rewriting the lambda to use a positive version\nof the function (like ",(0,s.jsx)(n.code,{children:"takeIf"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-5",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"negativeFunctions"})," (default: ",(0,s.jsx)(n.code,{children:"['takeUnless', 'none']"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["Function names expressed in the negative that can form double negatives with their lambda blocks. These are grouped together with a recommendation to use a positive counterpart, or ",(0,s.jsx)(n.code,{children:"null"})," if this is unknown."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"negativeFunctionNameParts"})," (default: ",(0,s.jsx)(n.code,{children:"['not', 'non']"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Function name parts to look for in the lambda block when deciding if the lambda contains a negative."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-10",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun Int.evenOrNull() = takeUnless { it % 2 != 0 }\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-9",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun Int.evenOrNull() = takeIf { it % 2 == 0 }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"equalsnullcall",children:"EqualsNullCall"}),"\n",(0,s.jsxs)(n.p,{children:["To compare an object with ",(0,s.jsx)(n.code,{children:"null"})," prefer using ",(0,s.jsx)(n.code,{children:"=="}),". This rule detects and reports instances in the code where the\n",(0,s.jsx)(n.code,{children:"equals()"})," method is used to compare a value with ",(0,s.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-11",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun isNull(str: String) = str.equals(null)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-10",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun isNull(str: String) = str == null\n"})}),"\n",(0,s.jsx)(n.h3,{id:"equalsonsignatureline",children:"EqualsOnSignatureLine"}),"\n",(0,s.jsx)(n.p,{children:"Requires that the equals sign, when used for an expression style function, is on the same line as the\nrest of the function signature."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-12",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun stuff(): Int\n    = 5\n\nfun <V> foo(): Int where V : Int\n    = 5\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-11",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun stuff() = 5\n\nfun stuff() =\n    foo.bar()\n\nfun <V> foo(): Int where V : Int = 5\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explicitcollectionelementaccessmethod",children:"ExplicitCollectionElementAccessMethod"}),"\n",(0,s.jsxs)(n.p,{children:["In Kotlin functions ",(0,s.jsx)(n.code,{children:"get"})," or ",(0,s.jsx)(n.code,{children:"set"})," can be replaced with the shorter operator \u2014 ",(0,s.jsx)(n.code,{children:"[]"}),",\nsee ",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/operator-overloading.html#indexed-access-operator",children:"Indexed access operator"}),".\nPrefer the usage of the indexed access operator ",(0,s.jsx)(n.code,{children:"[]"})," for map or list element access or insert methods."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-13",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val map = mutableMapOf<String, String>()\nmap.put("key", "value")\nval value = map.get("key")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-12",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val map = mutableMapOf<String, String>()\nmap["key"] = "value"\nval value = map["key"]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"explicititlambdaparameter",children:"ExplicitItLambdaParameter"}),"\n",(0,s.jsxs)(n.p,{children:["Lambda expressions are one of the core features of the language. They often include very small chunks of\ncode using only one parameter. In this cases Kotlin can supply the implicit ",(0,s.jsx)(n.code,{children:"it"})," parameter\nto make code more concise. It fits most use cases, but when faced larger or nested chunks of code,\nyou might want to add an explicit name for the parameter. Naming it just ",(0,s.jsx)(n.code,{children:"it"})," is meaningless and only\nmakes your code misleading, especially when dealing with nested functions."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-14",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"a?.let { it -> it.plus(1) }\nfoo.flatMapObservable { it -> Observable.fromIterable(it) }\nlistOfPairs.map(::second).forEach { it ->\n    it.execute()\n}\ncollection.zipWithNext { it, next -> Pair(it, next) }\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-13",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"a?.let { it.plus(1) } // Much better to use implicit it\nfoo.flatMapObservable(Observable::fromIterable) // Here we can have a method reference\n\n// For multiline blocks it is usually better come up with a clear and more meaningful name\nlistOfPairs.map(::second).forEach { apiRequest ->\n    apiRequest.execute()\n}\n\n// Lambdas with multiple parameter should be named clearly, using it for one of them can be confusing\ncollection.zipWithNext { prev, next ->\n    Pair(prev, next)\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expressionbodysyntax",children:"ExpressionBodySyntax"}),"\n",(0,s.jsxs)(n.p,{children:["Functions which only contain a ",(0,s.jsx)(n.code,{children:"return"})," statement can be collapsed to an expression body. This shortens and\ncleans up the code."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-6",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"includeLineWrapping"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"include return statements with line wraps in it"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-15",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun stuff(): Int {\n    return 5\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-14",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun stuff() = 5\n\nfun stuff() {\n    return\n        moreStuff()\n            .getStuff()\n            .stuffStuff()\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"forbiddenannotation",children:"ForbiddenAnnotation"}),"\n",(0,s.jsx)(n.p,{children:"This rule allows to set a list of forbidden annotations. This can be used to discourage the use\nof language annotations which do not require explicit import."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-7",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"annotations"})," (default: ",(0,s.jsx)(n.code,{children:"['java.lang.SuppressWarnings', 'java.lang.Deprecated', 'java.lang.annotation.Documented', 'java.lang.annotation.Target', 'java.lang.annotation.Retention', 'java.lang.annotation.Repeatable', 'java.lang.annotation.Inherited']"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"List of fully qualified annotation classes which are forbidden."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-16",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'@SuppressWarnings("unused")\nclass SomeClass()\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-15",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'@Suppress("unused")\nclass SomeClass()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"forbiddencomment",children:"ForbiddenComment"}),"\n",(0,s.jsx)(n.p,{children:"This rule allows to set a list of comments which are forbidden in the codebase and should only be used during\ndevelopment. Offending code comments will then be reported."}),"\n",(0,s.jsxs)(n.p,{children:["The regular expressions in ",(0,s.jsx)(n.code,{children:"comments"})," list will have the following behaviors while matching the comments:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Each comment will be handled individually."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"single line comments are always separate, consecutive lines are not merged."}),"\n",(0,s.jsx)(n.li,{children:"multi line comments are not split up, the regex will be applied to the whole comment."}),"\n",(0,s.jsx)(n.li,{children:"KDoc comments are not split up, the regex will be applied to the whole comment."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"The following comment delimiters (and indentation before them) are removed"})," before applying the regex:\n",(0,s.jsx)(n.code,{children:"//"}),", ",(0,s.jsx)(n.code,{children:"// "}),", ",(0,s.jsx)(n.code,{children:"/\u200b*"}),", ",(0,s.jsx)(n.code,{children:"/\u200b* "}),", ",(0,s.jsx)(n.code,{children:"/\u200b**"}),", ",(0,s.jsx)(n.code,{children:"*"})," aligners, ",(0,s.jsx)(n.code,{children:"*\u200b/"}),", ",(0,s.jsx)(n.code,{children:" *\u200b/"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"The regex is applied as a multiline regex"}),",\nsee ",(0,s.jsx)(n.a,{href:"https://www.regular-expressions.info/anchors.html",children:"Anchors"})," for more info.\nTo match the start and end of each line, use ",(0,s.jsx)(n.code,{children:"^"})," and ",(0,s.jsx)(n.code,{children:"$"}),".\nTo match the start and end of the whole comment, use ",(0,s.jsx)(n.code,{children:"\\A"})," and ",(0,s.jsx)(n.code,{children:"\\Z"}),".\nTo turn off multiline, use ",(0,s.jsx)(n.code,{children:"(?-m)"})," at the start of your regex."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"The regex is applied with dotall semantics"}),", meaning ",(0,s.jsx)(n.code,{children:"."})," will match any character including newlines,\nthis is to ensure that freeform line-wrapping doesn't mess with simple regexes.\nTo turn off this behavior, use ",(0,s.jsx)(n.code,{children:"(?-s)"})," at the start of your regex, or use ",(0,s.jsx)(n.code,{children:"[^\\r\\n]*"})," instead of ",(0,s.jsx)(n.code,{children:".*"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:'The regex will be searched using "contains" semantics'}),' not "matches",\nso partial comment matches will flag forbidden comments.\nIn practice this means there\'s no need to start and end the regex with ',(0,s.jsx)(n.code,{children:".*"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The rule can be configured to add extra comments to the list of forbidden comments, here are some examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"ForbiddenComment:\n  comments:\n    # Repeat the default configuration if it's still needed.\n    - reason: 'Forbidden FIXME todo marker in comment, please fix the problem.'\n      value: 'FIXME:'\n    - reason: 'Forbidden STOPSHIP todo marker in comment, please address the problem before shipping the code.'\n      value: 'STOPSHIP:'\n    - reason: 'Forbidden TODO todo marker in comment, please do the changes.'\n      value: 'TODO:'\n    # Add additional patterns to the list.\n\n    - reason: 'Authors are not recorded in KDoc.'\n      value: '@author'\n\n    - reason: 'REVIEW markers are not allowed in production code, only use before PR is merged.'\n      value: '^\\s*(?i)REVIEW\\b'\n      # Non-compliant: // REVIEW this code before merging.\n      # Compliant: // Preview will show up here.\n\n    - reason: 'Use @androidx.annotation.VisibleForTesting(otherwise = VisibleForTesting.PRIVATE) instead.'\n      value: '^private$'\n      # Non-compliant: /*private*/fun f() { }\n\n      - reason: 'KDoc tag should have a value.'\n        value: '^\\s*@(?!suppress|hide)\\w+\\s*$'\n        # Non-compliant: /** ... @see */\n    # Compliant: /** ... @throws IOException when there's a network problem */\n\n    - reason: 'include an issue link at the beginning preceded by a space'\n      value: 'BUG:(?! https://github\\.com/company/repo/issues/\\d+).*'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By default the commonly used todo markers are forbidden: ",(0,s.jsx)(n.code,{children:"TODO:"}),", ",(0,s.jsx)(n.code,{children:"FIXME:"})," and ",(0,s.jsx)(n.code,{children:"STOPSHIP:"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-8",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.del,{children:(0,s.jsx)(n.code,{children:"values"})})," (default: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deprecated"}),": Use ",(0,s.jsx)(n.code,{children:"comments"})," instead, make sure you escape your text for Regular Expressions."]}),"\n",(0,s.jsx)(n.p,{children:"forbidden comment strings"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"comments"})," (default: ",(0,s.jsx)(n.code,{children:"['FIXME:', 'STOPSHIP:', 'TODO:']"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"forbidden comment string patterns"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowedPatterns"})," (default: ",(0,s.jsx)(n.code,{children:"''"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["ignores comments which match the specified regular expression. For example ",(0,s.jsx)(n.code,{children:"Ticket|Task"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.del,{children:(0,s.jsx)(n.code,{children:"customMessage"})})," (default: ",(0,s.jsx)(n.code,{children:"''"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deprecated"}),": Use ",(0,s.jsx)(n.code,{children:"comments"})," and provide ",(0,s.jsx)(n.code,{children:"reason"})," against each ",(0,s.jsx)(n.code,{children:"value"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"error message which overrides the default one"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-17",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val a = "" // TODO: remove please\n/**\n* FIXME: this is a hack\n*/\nfun foo() { }\n/* STOPSHIP: */\n'})}),"\n",(0,s.jsx)(n.h3,{id:"forbiddenimport",children:"ForbiddenImport"}),"\n",(0,s.jsx)(n.p,{children:"Reports all imports that are forbidden."}),"\n",(0,s.jsx)(n.p,{children:"This rule allows to set a list of forbidden [imports].\nThis can be used to discourage the use of unstable, experimental or deprecated APIs."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-9",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"imports"})," (default: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"imports which should not be used"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"forbiddenPatterns"})," (default: ",(0,s.jsx)(n.code,{children:"''"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["reports imports which match the specified regular expression. For example ",(0,s.jsx)(n.code,{children:"net.*R"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-18",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"import kotlin.jvm.JvmField\nimport kotlin.SinceKotlin\n"})}),"\n",(0,s.jsx)(n.h3,{id:"forbiddenmethodcall",children:"ForbiddenMethodCall"}),"\n",(0,s.jsx)(n.p,{children:"Reports all method or constructor invocations that are forbidden."}),"\n",(0,s.jsx)(n.p,{children:"This rule allows to set a list of forbidden [methods] or constructors. This can be used to discourage the use\nof unstable, experimental or deprecated methods, especially for methods imported from external libraries."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-10",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"methods"})," (default: ",(0,s.jsx)(n.code,{children:"['kotlin.io.print', 'kotlin.io.println']"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["List of fully qualified method signatures which are forbidden. Methods can be defined without full signature (i.e. ",(0,s.jsx)(n.code,{children:"java.time.LocalDate.now"}),") which will report calls of all methods with this name or with full signature (i.e. ",(0,s.jsx)(n.code,{children:"java.time.LocalDate(java.time.Clock)"}),") which would report only call with this concrete signature. If you want to forbid an extension function like ",(0,s.jsx)(n.code,{children:"fun String.hello(a: Int)"})," you should add the receiver parameter as the first parameter like this: ",(0,s.jsx)(n.code,{children:"hello(kotlin.String, kotlin.Int)"}),". To forbid constructor calls you need to define them with ",(0,s.jsx)(n.code,{children:"<init>"}),", for example ",(0,s.jsx)(n.code,{children:"java.util.Date.<init>"}),". To forbid calls involving type parameters, omit them, for example ",(0,s.jsx)(n.code,{children:"fun hello(args: Array<Any>)"})," is referred to as simply ",(0,s.jsx)(n.code,{children:"hello(kotlin.Array)"})," (also the signature for vararg parameters). To forbid methods from the companion object reference the Companion class, for example as ",(0,s.jsx)(n.code,{children:"TestClass.Companion.hello()"})," (even if it is marked ",(0,s.jsx)(n.code,{children:"@JvmStatic"}),")."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-19",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun main() {\n    println()\n    val myPrintln : () -> Unit = ::println\n    kotlin.io.print("Hello, World!")\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"forbiddensuppress",children:"ForbiddenSuppress"}),"\n",(0,s.jsx)(n.p,{children:"Report suppressions of all forbidden rules."}),"\n",(0,s.jsxs)(n.p,{children:["This rule allows to set a list of [rules] whose suppression is forbidden.\nThis can be used to discourage the abuse of the ",(0,s.jsx)(n.code,{children:"Suppress"})," and ",(0,s.jsx)(n.code,{children:"SuppressWarnings"})," annotations."]}),"\n",(0,s.jsx)(n.p,{children:"This rule is not capable of reporting suppression of itself, as that's a language feature with precedence."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-11",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rules"})," (default: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Rules whose suppression is forbidden."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-20",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'package foo\n\n// When the rule "MaximumLineLength" is forbidden\n@Suppress("MaximumLineLength", "UNCHECKED_CAST")\nclass Bar\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-16",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'package foo\n\n// When the rule "MaximumLineLength" is forbidden\n@Suppress("UNCHECKED_CAST")\nclass Bar\n'})}),"\n",(0,s.jsx)(n.h3,{id:"forbiddenvoid",children:"ForbiddenVoid"}),"\n",(0,s.jsxs)(n.p,{children:["This rule detects usages of ",(0,s.jsx)(n.code,{children:"Void"})," and reports them as forbidden.\nThe Kotlin type ",(0,s.jsx)(n.code,{children:"Unit"})," should be used instead. This type corresponds to the ",(0,s.jsx)(n.code,{children:"Void"})," class in Java\nand has only one value - the ",(0,s.jsx)(n.code,{children:"Unit"})," object."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-12",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreOverridden"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"ignores void types in signatures of overridden functions"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreUsageInGenerics"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"ignore void types as generic arguments"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-21",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"runnable: () -> Void\nvar aVoid: Void? = null\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-17",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"runnable: () -> Unit\nVoid::class\n"})}),"\n",(0,s.jsx)(n.h3,{id:"functiononlyreturningconstant",children:"FunctionOnlyReturningConstant"}),"\n",(0,s.jsxs)(n.p,{children:["A function that only returns a single constant can be misleading. Instead, prefer declaring the constant\nas a ",(0,s.jsx)(n.code,{children:"const val"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-13",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreOverridableFunction"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if overridden functions should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreActualFunction"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if actual functions should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludedFunctions"})," (default: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"excluded functions"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.del,{children:(0,s.jsx)(n.code,{children:"excludeAnnotatedFunction"})})," (default: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deprecated"}),": Use ",(0,s.jsx)(n.code,{children:"ignoreAnnotated"})," instead"]}),"\n",(0,s.jsx)(n.p,{children:"allows to provide a list of annotations that disable this check"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-22",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun functionReturningConstantString() = "1"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-18",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'const val constantString = "1"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"loopwithtoomanyjumpstatements",children:"LoopWithTooManyJumpStatements"}),"\n",(0,s.jsxs)(n.p,{children:["Loops which contain multiple ",(0,s.jsx)(n.code,{children:"break"})," or ",(0,s.jsx)(n.code,{children:"continue"})," statements are hard to read and understand.\nTo increase readability they should be refactored into simpler loops."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-14",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxJumpCount"})," (default: ",(0,s.jsx)(n.code,{children:"1"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"maximum allowed jumps in a loop"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-23",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val strs = listOf("foo, bar")\nfor (str in strs) {\n    if (str == "bar") {\n        break\n    } else {\n        continue\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"magicnumber",children:"MagicNumber"}),"\n",(0,s.jsx)(n.p,{children:"This rule detects and reports usages of magic numbers in the code. Prefer defining constants with clear names\ndescribing what the magic number means."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-15",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreNumbers"})," (default: ",(0,s.jsx)(n.code,{children:"['-1', '0', '1', '2']"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"numbers which do not count as magic numbers"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreHashCodeFunction"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers in hashCode functions should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignorePropertyDeclaration"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers in property declarations should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreLocalVariableDeclaration"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers in local variable declarations should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreConstantDeclaration"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers in constant declarations should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreCompanionObjectPropertyDeclaration"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers in companion object declarations should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreAnnotation"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers in annotations should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreNamedArgument"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers in named arguments should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreEnums"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers in enums should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreRanges"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers in ranges should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreExtensionFunctions"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"whether magic numbers as subject of an extension function should be ignored"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-24",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'class User {\n\n    fun checkName(name: String) {\n        if (name.length > 42) {\n            throw IllegalArgumentException("username is too long")\n        }\n        // ...\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-19",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'class User {\n\n    fun checkName(name: String) {\n        if (name.length > MAX_USERNAME_SIZE) {\n            throw IllegalArgumentException("username is too long")\n        }\n        // ...\n    }\n\n    companion object {\n        private const val MAX_USERNAME_SIZE = 42\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mandatorybracesloops",children:"MandatoryBracesLoops"}),"\n",(0,s.jsxs)(n.p,{children:["This rule detects multi-line ",(0,s.jsx)(n.code,{children:"for"})," and ",(0,s.jsx)(n.code,{children:"while"})," loops which do not have braces.\nAdding braces would improve readability and avoid possible errors."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-25",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'for (i in 0..10)\n    println(i)\n\nwhile (true)\n    println("Hello, world")\n\ndo\n    println("Hello, world")\nwhile (true)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-20",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'for (i in 0..10) {\n    println(i)\n}\n\nfor (i in 0..10) println(i)\n\nwhile (true) {\n    println("Hello, world")\n}\n\nwhile (true) println("Hello, world")\n\ndo {\n    println("Hello, world")\n} while (true)\n\ndo println("Hello, world") while (true)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"maxchainedcallsonsameline",children:"MaxChainedCallsOnSameLine"}),"\n",(0,s.jsx)(n.p,{children:"Limits the number of chained calls which can be placed on a single line."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-16",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxChainedCalls"})," (default: ",(0,s.jsx)(n.code,{children:"5"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"maximum chained calls allowed on a single line"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-26",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"a().b().c().d().e().f()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-21",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"a().b().c()\n.d().e().f()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"maxlinelength",children:"MaxLineLength"}),"\n",(0,s.jsx)(n.p,{children:"This rule reports lines of code which exceed a defined maximum line length."}),"\n",(0,s.jsx)(n.p,{children:"Long lines might be hard to read on smaller screens or printouts. Additionally, having a maximum line length\nin the codebase will help make the code more uniform."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-17",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxLineLength"})," (default: ",(0,s.jsx)(n.code,{children:"120"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"maximum line length"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludePackageStatements"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if package statements should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludeImportStatements"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if import statements should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludeCommentStatements"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if comment statements should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludeRawStrings"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if raw strings should be ignored"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"maybeconst",children:"MayBeConst"}),"\n",(0,s.jsxs)(n.p,{children:["This rule identifies and reports properties (",(0,s.jsx)(n.code,{children:"val"}),") that may be ",(0,s.jsx)(n.code,{children:"const val"})," instead.\nUsing ",(0,s.jsx)(n.code,{children:"const val"})," can lead to better performance of the resulting bytecode as well as better interoperability with\nJava."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Aliases"}),": MayBeConstant"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-27",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val myConstant = "abc"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-22",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'const val MY_CONSTANT = "abc"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"modifierorder",children:"ModifierOrder"}),"\n",(0,s.jsxs)(n.p,{children:["This rule reports cases in the code where modifiers are not in the correct order. The default modifier order is\ntaken from: ",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/coding-conventions.html#modifiers-order",children:"Modifiers order"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-28",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"lateinit internal val str: String\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-23",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"internal lateinit val str: String\n"})}),"\n",(0,s.jsx)(n.h3,{id:"multilinelambdaitparameter",children:"MultilineLambdaItParameter"}),"\n",(0,s.jsxs)(n.p,{children:["Lambda expressions are very useful in a lot of cases, and they often include very small chunks of\ncode using only one parameter. In this cases Kotlin can supply the implicit ",(0,s.jsx)(n.code,{children:"it"})," parameter\nto make code more concise. However, when you are dealing with lambdas that contain multiple statements,\nyou might end up with code that is hard to read if you don't specify a readable, descriptive parameter name\nexplicitly."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-29",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val digits = 1234.let {\n    println(it)\n    listOf(it)\n}\n\nval digits = 1234.let { it ->\n    println(it)\n    listOf(it)\n}\n\nval flat = listOf(listOf(1), listOf(2)).mapIndexed { index, it ->\n    println(it)\n    it + index\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-24",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val digits = 1234.let { explicitParameterName ->\n    println(explicitParameterName)\n    listOf(explicitParameterName)\n}\n\nval lambda = { item: Int, that: String ->\n    println(item)\n    item.toString() + that\n}\n\nval digits = 1234.let { listOf(it) }\nval digits = 1234.let {\n    listOf(it)\n}\nval digits = 1234.let { it -> listOf(it) }\nval digits = 1234.let { it ->\n    listOf(it)\n}\nval digits = 1234.let { explicit -> listOf(explicit) }\nval digits = 1234.let { explicit ->\n    listOf(explicit)\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"multilinerawstringindentation",children:"MultilineRawStringIndentation"}),"\n",(0,s.jsx)(n.p,{children:"This rule ensures that raw strings have a consistent indentation."}),"\n",(0,s.jsxs)(n.p,{children:["The content of a multi line raw string should have the same indentation as the enclosing expression plus the\nconfigured indentSize. The closing triple-quotes (",(0,s.jsx)(n.code,{children:'"""'}),")  must have the same indentation as the enclosing expression."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-18",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"indentSize"})," (default: ",(0,s.jsx)(n.code,{children:"4"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"indentation size"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"trimmingMethods"})," (default: ",(0,s.jsx)(n.code,{children:"['trimIndent', 'trimMargin']"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"allows to provide a list of multiline string trimming methods"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-30",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val a = """\nHello World!\nHow are you?\n""".trimMargin()\n\nval a = """\n    Hello World!\n    How are you?\n    """.trimMargin()\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-25",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val a = """\n    Hello World!\n    How are you?\n""".trimMargin()\n\nval a = """\n    Hello World!\n      How are you?\n""".trimMargin()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"nestedclassesvisibility",children:"NestedClassesVisibility"}),"\n",(0,s.jsxs)(n.p,{children:["Nested classes inherit their visibility from the parent class\nand are often used to implement functionality local to the class it is nested in.\nThese nested classes can't have a higher visibility than their parent.\nHowever, the visibility can be further restricted by using a private modifier for instance.\nIn internal classes the ",(0,s.jsx)(n.em,{children:"explicit"})," public modifier for nested classes is misleading and thus unnecessary,\nbecause the nested class still has an internal visibility."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.16.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-31",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"internal class Outer {\n    // explicit public modifier still results in an internal nested class\n    public class Nested\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-26",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"internal class Outer {\n    class Nested1\n    internal class Nested2\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"newlineatendoffile",children:"NewLineAtEndOfFile"}),"\n",(0,s.jsx)(n.p,{children:"This rule reports files which do not end with a line separator."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h3,{id:"notabs",children:"NoTabs"}),"\n",(0,s.jsxs)(n.p,{children:["This rule reports if tabs are used in Kotlin files.\nAccording to\n",(0,s.jsx)(n.a,{href:"https://android.github.io/kotlin-guides/style.html#whitespace-characters",children:"Google's Kotlin style guide"}),"\nthe only whitespace chars that are allowed in a source file are the line terminator sequence\nand the ASCII horizontal space character (0x20). Strings containing tabs are allowed."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h3,{id:"nullablebooleancheck",children:"NullableBooleanCheck"}),"\n",(0,s.jsxs)(n.p,{children:["Detects nullable boolean checks which use an elvis expression ",(0,s.jsx)(n.code,{children:"?:"})," rather than equals ",(0,s.jsx)(n.code,{children:"=="}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Per the ",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/coding-conventions.html#nullable-boolean-values-in-conditions",children:"Kotlin coding conventions"}),"\nconverting a nullable boolean property to non-null should be done via ",(0,s.jsx)(n.code,{children:"!= false"})," or ",(0,s.jsx)(n.code,{children:"== true"}),"\nrather than ",(0,s.jsx)(n.code,{children:"?: true"})," or ",(0,s.jsx)(n.code,{children:"?: false"})," (respectively)."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-32",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"value ?: true\nvalue ?: false\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-27",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"value != false\nvalue == true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"objectliteraltolambda",children:"ObjectLiteralToLambda"}),"\n",(0,s.jsx)(n.p,{children:"An anonymous object that does nothing other than the implementation of a single method\ncan be used as a lambda."}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/java-interop.html#sam-conversions",children:"SAM conversions"}),",\n",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/fun-interfaces.html",children:"Functional (SAM) interfaces"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-33",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"object : Foo {\n    override fun bar() {\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-28",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"Foo {\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"optionalabstractkeyword",children:"OptionalAbstractKeyword"}),"\n",(0,s.jsxs)(n.p,{children:["This rule reports ",(0,s.jsx)(n.code,{children:"abstract"})," modifiers which are unnecessary and can be removed."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-34",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"abstract interface Foo { // abstract keyword not needed\n\n    abstract fun x() // abstract keyword not needed\n    abstract var y: Int // abstract keyword not needed\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-29",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"interface Foo {\n\n    fun x()\n    var y: Int\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"optionalunit",children:"OptionalUnit"}),"\n",(0,s.jsxs)(n.p,{children:["It is not necessary to define a return type of ",(0,s.jsx)(n.code,{children:"Unit"})," on functions or to specify a lone Unit statement.\nThis rule detects and reports instances where the ",(0,s.jsx)(n.code,{children:"Unit"})," return type is specified on functions and the occurrences\nof a lone Unit statement."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-35",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun foo(): Unit {\n    return Unit\n}\nfun foo() = Unit\n\nfun doesNothing() {\n    Unit\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-30",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun foo() { }\n\n// overridden no-op functions are allowed\noverride fun foo() = Unit\n"})}),"\n",(0,s.jsx)(n.h3,{id:"optionalwhenbraces",children:(0,s.jsx)(n.del,{children:"OptionalWhenBraces"})}),"\n",(0,s.jsx)(n.p,{children:"Same functionality is implemented in BracesOnWhenStatements"}),"\n",(0,s.jsx)(n.p,{children:"This rule reports unnecessary braces in when expressions. These optional braces should be removed."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-36",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val i = 1\nwhen (i) {\n    1 -> { println("one") } // unnecessary curly braces since there is only one statement\n    else -> println("else")\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-31",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val i = 1\nwhen (i) {\n    1 -> println("one")\n    else -> println("else")\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"prefertooverpairsyntax",children:"PreferToOverPairSyntax"}),"\n",(0,s.jsx)(n.p,{children:"This rule detects the usage of the Pair constructor to create pairs of values."}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"<value1>"})," to ",(0,s.jsx)(n.code,{children:"<value2>"})," is preferred."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-37",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val pair = Pair(1, 2)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-32",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val pair = 1 to 2\n"})}),"\n",(0,s.jsx)(n.h3,{id:"protectedmemberinfinalclass",children:"ProtectedMemberInFinalClass"}),"\n",(0,s.jsxs)(n.p,{children:["Kotlin classes are ",(0,s.jsx)(n.code,{children:"final"})," by default. Thus classes which are not marked as ",(0,s.jsx)(n.code,{children:"open"})," should not contain any ",(0,s.jsx)(n.code,{children:"protected"}),"\nmembers. Consider using ",(0,s.jsx)(n.code,{children:"private"})," or ",(0,s.jsx)(n.code,{children:"internal"})," modifiers instead."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-38",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class ProtectedMemberInFinalClass {\n    protected var i = 0\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-33",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class ProtectedMemberInFinalClass {\n    private var i = 0\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"redundantexplicittype",children:"RedundantExplicitType"}),"\n",(0,s.jsx)(n.p,{children:"Local properties do not need their type to be explicitly provided when the inferred type matches the explicit type."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-39",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun function() {\n    val x: String = "string"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-34",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun function() {\n    val x = "string"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"redundanthigherordermapusage",children:"RedundantHigherOrderMapUsage"}),"\n",(0,s.jsx)(n.p,{children:"Redundant maps add complexity to the code and accomplish nothing. They should be removed or replaced with the proper\noperator."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-40",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun foo(list: List<Int>): List<Int> {\n    return list\n        .filter { it > 5 }\n        .map { it }\n}\n\nfun bar(list: List<Int>): List<Int> {\n    return list\n        .filter { it > 5 }\n        .map {\n            doSomething(it)\n            it\n        }\n}\n\nfun baz(set: Set<Int>): List<Int> {\n    return set.map { it }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-35",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun foo(list: List<Int>): List<Int> {\n    return list\n        .filter { it > 5 }\n}\n\nfun bar(list: List<Int>): List<Int> {\n    return list\n        .filter { it > 5 }\n        .onEach {\n            doSomething(it)\n        }\n}\n\nfun baz(set: Set<Int>): List<Int> {\n    return set.toList()\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"redundantvisibilitymodifierrule",children:"RedundantVisibilityModifierRule"}),"\n",(0,s.jsxs)(n.p,{children:["This rule checks for redundant visibility modifiers.\nOne exemption is the\n",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/whatsnew14.html#explicit-api-mode-for-library-authors",children:"explicit API mode"}),"\nIn this mode, the visibility modifier should be defined explicitly even if it is public.\nHence, the rule ignores the visibility modifiers in explicit API mode."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Aliases"}),": RedundantVisibilityModifier"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-41",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"public interface Foo { // public per default\n\n    public fun bar() // public per default\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-36",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"interface Foo {\n\n    fun bar()\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"returncount",children:"ReturnCount"}),"\n",(0,s.jsx)(n.p,{children:"Restrict the number of return methods allowed in methods."}),"\n",(0,s.jsx)(n.p,{children:"Having many exit points in a function can be confusing and impacts readability of the\ncode."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-19",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"max"})," (default: ",(0,s.jsx)(n.code,{children:"2"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"define the maximum number of return statements allowed per function"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludedFunctions"})," (default: ",(0,s.jsx)(n.code,{children:"['equals']"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"define a list of function names to be ignored by this check"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludeLabeled"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if labeled return statements should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludeReturnFromLambda"})," (default: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if labeled return from a lambda should be ignored"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludeGuardClauses"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if true guard clauses at the beginning of a method should be ignored"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-42",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun foo(i: Int): String {\n    when (i) {\n        1 -> return "one"\n        2 -> return "two"\n        else -> return "other"\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-37",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun foo(i: Int): String {\n    return when (i) {\n        1 -> "one"\n        2 -> "two"\n        else -> "other"\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"safecast",children:"SafeCast"}),"\n",(0,s.jsx)(n.p,{children:"This rule inspects casts and reports casts which could be replaced with safe casts instead."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-43",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun numberMagic(number: Number) {\n    val i = if (number is Int) number else null\n    // ...\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-38",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun numberMagic(number: Number) {\n    val i = number as? Int\n    // ...\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"serialversionuidinserializableclass",children:"SerialVersionUIDInSerializableClass"}),"\n",(0,s.jsxs)(n.p,{children:["Classes which implement the ",(0,s.jsx)(n.code,{children:"Serializable"})," interface should also correctly declare a ",(0,s.jsx)(n.code,{children:"serialVersionUID"}),".\nThis rule verifies that a ",(0,s.jsx)(n.code,{children:"serialVersionUID"})," was correctly defined and declared as ",(0,s.jsx)(n.code,{children:"private"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.a,{href:"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html",children:["More about ",(0,s.jsx)(n.code,{children:"SerialVersionUID"})]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.16.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-44",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class IncorrectSerializable : Serializable {\n\n    companion object {\n        val serialVersionUID = 1 // wrong declaration for UID\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-39",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class CorrectSerializable : Serializable {\n\n    companion object {\n        private const val serialVersionUID = 1L\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"spacingbetweenpackageandimports",children:"SpacingBetweenPackageAndImports"}),"\n",(0,s.jsx)(n.p,{children:"This rule verifies spacing between package and import statements as well as between import statements and class\ndeclarations."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-45",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"package foo\nimport a.b\nclass Bar { }\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-40",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"package foo\n\nimport a.b\n\nclass Bar { }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"stringshouldberawstring",children:"StringShouldBeRawString"}),"\n",(0,s.jsxs)(n.p,{children:['This rule reports when the string can be converted to Kotlin raw string.\nUsage of a raw string is preferred as that avoids the need for escaping strings escape characters like \\n, \\t, ".\nRaw string also allows us to represent multiline string without the need of \\n.\nAlso, see ',(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/coding-conventions.html#strings",children:"Kotlin coding convention"}),"  for\nrecommendation on using multiline strings"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-20",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxEscapedCharacterCount"})," (default: ",(0,s.jsx)(n.code,{children:"2"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"maximum escape characters allowed"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoredCharacters"})," (default: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"list of characters to ignore"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-46",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val windowJson = "{\\n" +\n    "  \\"window\\": {\\n" +\n    "    \\"title\\": \\"Sample Quantum With AI and ML Widget\\",\\n" +\n    "    \\"name\\": \\"main_window\\",\\n" +\n    "    \\"width\\": 500,\\n" +\n    "    \\"height\\": 500\\n" +\n    "  }\\n" +\n    "}"\n\nval patRegex = "/^(\\\\/[^\\\\/]+){0,2}\\\\/?\\$/gm\\n"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-41",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val windowJson = """\n    {\n         "window": {\n             "title": "Sample Quantum With AI and ML Widget",\n             "name": "main_window",\n             "width": 500,\n             "height": 500\n         }\n    }\n""".trimIndent()\n\nval patRegex = """/^(\\/[^\\/]+){0,2}\\/?$/gm"""\n'})}),"\n",(0,s.jsx)(n.h3,{id:"throwscount",children:"ThrowsCount"}),"\n",(0,s.jsxs)(n.p,{children:["Functions should have clear ",(0,s.jsx)(n.code,{children:"throw"})," statements. Functions with many ",(0,s.jsx)(n.code,{children:"throw"})," statements can be harder to read and lead\nto confusion. Instead, prefer limiting the number of ",(0,s.jsx)(n.code,{children:"throw"})," statements in a function."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 10min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-21",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"max"})," (default: ",(0,s.jsx)(n.code,{children:"2"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"maximum amount of throw statements in a method"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludeGuardClauses"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"if set to true, guard clauses do not count towards the allowed throws count"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-47",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun foo(i: Int) {\n    when (i) {\n        1 -> throw IllegalArgumentException()\n        2 -> throw IllegalArgumentException()\n        3 -> throw IllegalArgumentException()\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-42",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun foo(i: Int) {\n    when (i) {\n        1,2,3 -> throw IllegalArgumentException()\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"trailingwhitespace",children:"TrailingWhitespace"}),"\n",(0,s.jsx)(n.p,{children:"This rule reports lines that end with a whitespace."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h3,{id:"trimmultilinerawstring",children:"TrimMultilineRawString"}),"\n",(0,s.jsxs)(n.p,{children:["All the Raw strings that have more than one line should be followed by ",(0,s.jsx)(n.code,{children:"trimMargin()"})," or ",(0,s.jsx)(n.code,{children:"trimIndent()"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-22",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"trimmingMethods"})," (default: ",(0,s.jsx)(n.code,{children:"['trimIndent', 'trimMargin']"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"allows to provide a list of multiline string trimming methods"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-48",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'"""\nHello World!\nHow are you?\n"""\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-43",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'"""\n|  Hello World!\n|  How are you?\n""".trimMargin()\n\n"""\nHello World!\nHow are you?\n""".trimIndent()\n\n"""Hello World! How are you?"""\n'})}),"\n",(0,s.jsx)(n.h3,{id:"underscoresinnumericliterals",children:"UnderscoresInNumericLiterals"}),"\n",(0,s.jsxs)(n.p,{children:["This rule detects and reports long base 10 numbers which should be separated with underscores\nfor readability. For ",(0,s.jsx)(n.code,{children:"Serializable"})," classes or objects, the field ",(0,s.jsx)(n.code,{children:"serialVersionUID"})," is\nexplicitly ignored. For floats and doubles, anything to the right of the decimal point is ignored."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-23",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.del,{children:(0,s.jsx)(n.code,{children:"acceptableDecimalLength"})})," (default: ",(0,s.jsx)(n.code,{children:"5"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deprecated"}),": Use ",(0,s.jsx)(n.code,{children:"acceptableLength"})," instead"]}),"\n",(0,s.jsx)(n.p,{children:"Length under which base 10 numbers are not required to have underscores"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"acceptableLength"})," (default: ",(0,s.jsx)(n.code,{children:"4"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Maximum number of consecutive digits that a numeric literal can have without using an underscore"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowNonStandardGrouping"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"If set to false, groups of exactly three digits must be used. If set to true, 100_00 is allowed."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-49",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"const val DEFAULT_AMOUNT = 1000000\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-44",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"const val DEFAULT_AMOUNT = 1_000_000\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessaryabstractclass",children:"UnnecessaryAbstractClass"}),"\n",(0,s.jsxs)(n.p,{children:["This rule inspects ",(0,s.jsx)(n.code,{children:"abstract"})," classes. In case an ",(0,s.jsx)(n.code,{children:"abstract class"})," does not have any concrete members it should be\nrefactored into an interface. Abstract classes which do not define any ",(0,s.jsx)(n.code,{children:"abstract"})," members should instead be\nrefactored into concrete classes."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-24",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.del,{children:(0,s.jsx)(n.code,{children:"excludeAnnotatedClasses"})})," (default: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deprecated"}),": Use ",(0,s.jsx)(n.code,{children:"ignoreAnnotated"})," instead"]}),"\n",(0,s.jsx)(n.p,{children:"Allows you to provide a list of annotations that disable this check."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-50",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"abstract class OnlyAbstractMembersInAbstractClass { // violation: no concrete members\n\n    abstract val i: Int\n    abstract fun f()\n}\n\nabstract class OnlyConcreteMembersInAbstractClass { // violation: no abstract members\n\n    val i: Int = 0\n    fun f() { }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-45",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"interface OnlyAbstractMembersInInterface {\n    val i: Int\n    fun f()\n}\n\nclass OnlyConcreteMembersInClass {\n    val i: Int = 0\n    fun f() { }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessaryannotationusesitetarget",children:"UnnecessaryAnnotationUseSiteTarget"}),"\n",(0,s.jsxs)(n.p,{children:["This rule inspects the use of the Annotation use-site Target. In case that the use-site Target is not needed it can\nbe removed. For more information check the kotlin documentation:\n",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/annotations.html#annotation-use-site-targets",children:"Annotation use-site targets"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-51",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'@property:Inject private val foo: String = "bar" // violation: unnecessary @property:\n\nclass Module(@param:Inject private val foo: String) // violation: unnecessary @param:\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-46",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class Module(@Inject private val foo: String)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessaryapply",children:"UnnecessaryApply"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"apply"})," expressions are used frequently, but sometimes their usage should be replaced with\nan ordinary method/extension function call to reduce visual complexity"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.16.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-52",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'config.apply { version = "1.2" } // can be replaced with `config.version = "1.2"`\nconfig?.apply { environment = "test" } // can be replaced with `config?.environment = "test"`\nconfig?.apply { println(version) } // `apply` can be replaced by `let`\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-47",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'config.apply {\n    version = "1.2"\n    environment = "test"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessarybackticks",children:"UnnecessaryBackticks"}),"\n",(0,s.jsx)(n.p,{children:"This rule reports unnecessary backticks."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-53",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class `HelloWorld`\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-48",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class HelloWorld\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessarybracesaroundtrailinglambda",children:"UnnecessaryBracesAroundTrailingLambda"}),"\n",(0,s.jsxs)(n.p,{children:["In Kotlin functions the last lambda parameter of a function is a function then a lambda expression passed as the\ncorresponding argument can be placed outside the parentheses.\nsee ",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/lambdas.html#passing-trailing-lambdas",children:"Passing trailing lambdas"}),".\nPrefer the usage of trailing lambda."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-54",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun test() {\n    repeat(10, {\n        println(it)\n    })\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-49",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun test() {\n    repeat(10) {\n        println(it)\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessaryfilter",children:"UnnecessaryFilter"}),"\n",(0,s.jsx)(n.p,{children:"Unnecessary filters add complexity to the code and accomplish nothing. They should be removed."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-55",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val x = listOf(1, 2, 3)\n    .filter { it > 1 }\n    .count()\n\nval x = listOf(1, 2, 3)\n    .filter { it > 1 }\n    .isEmpty()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-50",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val x = listOf(1, 2, 3)\n    .count { it > 2 }\n}\n\nval x = listOf(1, 2, 3)\n    .none { it > 1 }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessaryinheritance",children:"UnnecessaryInheritance"}),"\n",(0,s.jsxs)(n.p,{children:["This rule reports unnecessary super types. Inheriting from ",(0,s.jsx)(n.code,{children:"Any"})," or ",(0,s.jsx)(n.code,{children:"Object"})," is unnecessary and should simply be\nremoved."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-56",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class A : Any()\nclass B : Object()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessaryinnerclass",children:"UnnecessaryInnerClass"}),"\n",(0,s.jsxs)(n.p,{children:["This rule reports unnecessary inner classes. Nested classes that do not access members from the outer class do\nnot require the ",(0,s.jsx)(n.code,{children:"inner"})," qualifier."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-57",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'class A {\n    val foo = "BAR"\n\n    inner class B {\n        val fizz = "BUZZ"\n\n        fun printFizz() {\n            println(fizz)\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessarylet",children:"UnnecessaryLet"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"let"})," expressions are used extensively in our code for null-checking and chaining functions,\nbut sometimes their usage should be replaced with an ordinary method/extension function call\nto reduce visual complexity."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-58",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"a.let { print(it) } // can be replaced with `print(a)`\na.let { it.plus(1) } // can be replaced with `a.plus(1)`\na?.let { it.plus(1) } // can be replaced with `a?.plus(1)`\na?.let { that -> that.plus(1) }?.let { it.plus(1) } // can be replaced with `a?.plus(1)?.plus(1)`\na.let { 1.plus(1) } // can be replaced with `1.plus(1)`\na?.let { 1.plus(1) } // can be replaced with `if (a != null) 1.plus(1)`\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-51",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"a?.let { print(it) }\na?.let { 1.plus(it) } ?.let { msg -> print(msg) }\na?.let { it.plus(it) }\nval b = a?.let { 1.plus(1) }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unnecessaryparentheses",children:"UnnecessaryParentheses"}),"\n",(0,s.jsx)(n.p,{children:"This rule reports unnecessary parentheses around expressions.\nThese unnecessary parentheses can safely be removed."}),"\n",(0,s.jsx)(n.p,{children:"Added in v1.0.0.RC4"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-25",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowForUnclearPrecedence"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["allow parentheses when not strictly required but precedence may be unclear, such as ",(0,s.jsx)(n.code,{children:"(a && b) || c"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-59",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val local = (5 + 3)\n\nif ((local == 8)) { }\n\nfun foo() {\n    function({ input -> println(input) })\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-52",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"val local = 5 + 3\n\nif (local == 8) { }\n\nfun foo() {\n    function { input -> println(input) }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"untilinsteadofrangeto",children:"UntilInsteadOfRangeTo"}),"\n",(0,s.jsx)(n.p,{children:"Reports calls to '..' operator instead of calls to 'until'.\n'until' is applicable in cases where the upper range value is described as\nsome value subtracted by 1. 'until' helps to prevent off-by-one errors."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-60",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"for (i in 0 .. 10 - 1) {}\nval range = 0 .. 10 - 1\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-53",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"for (i in 0 until 10) {}\nval range = 0 until 10\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unusedimports",children:"UnusedImports"}),"\n",(0,s.jsx)(n.p,{children:"This rule reports unused imports. Unused imports are dead code and should be removed.\nExempt from this rule are imports resulting from references to elements within KDoc and\nfrom destructuring declarations (componentN imports)."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h3,{id:"unusedparameter",children:"UnusedParameter"}),"\n",(0,s.jsx)(n.p,{children:"An unused parameter can be removed to simplify the signature of the function."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.23.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Aliases"}),": UNUSED_VARIABLE, UNUSED_PARAMETER, unused, UnusedPrivateMember"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-26",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowedNames"})," (default: ",(0,s.jsx)(n.code,{children:"'ignored|expected'"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"unused parameter names matching this regex are ignored"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-61",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun foo(unused: String) {\nprintln()\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-54",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun foo(used: String) {\nprintln(used)\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unusedprivateclass",children:"UnusedPrivateClass"}),"\n",(0,s.jsx)(n.p,{children:"Reports unused private classes. If private classes are unused they should be removed. Otherwise, this dead code\ncan lead to confusion and potential bugs."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Aliases"}),": unused"]}),"\n",(0,s.jsx)(n.h3,{id:"unusedprivatemember",children:"UnusedPrivateMember"}),"\n",(0,s.jsx)(n.p,{children:"Reports unused private functions."}),"\n",(0,s.jsx)(n.p,{children:"If these private functions are unused they should be removed. Otherwise, this dead code\ncan lead to confusion and potential bugs."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.16.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Aliases"}),": UNUSED_VARIABLE, UNUSED_PARAMETER, unused"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-27",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowedNames"})," (default: ",(0,s.jsx)(n.code,{children:"''"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"unused private function names matching this regex are ignored"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"unusedprivateproperty",children:"UnusedPrivateProperty"}),"\n",(0,s.jsx)(n.p,{children:"An unused private property can be removed to simplify the source file."}),"\n",(0,s.jsxs)(n.p,{children:["This rule also detects unused constructor parameters since these can become\nproperties of the class when they are declared with ",(0,s.jsx)(n.code,{children:"val"})," or ",(0,s.jsx)(n.code,{children:"var"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.23.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Aliases"}),": UNUSED_VARIABLE, UNUSED_PARAMETER, unused, UnusedPrivateMember"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-28",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowedNames"})," (default: ",(0,s.jsx)(n.code,{children:"'_|ignored|expected|serialVersionUID'"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"unused property names matching this regex are ignored"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-62",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'class Foo {\nprivate val unused = "unused"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-55",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'class Foo {\nprivate val used = "used"\n\nfun greet() {\n    println(used)\n}\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"useanyornoneinsteadoffind",children:"UseAnyOrNoneInsteadOfFind"}),"\n",(0,s.jsxs)(n.p,{children:["Turn on this rule to flag ",(0,s.jsx)(n.code,{children:"find"})," calls for null check that can be replaced with a ",(0,s.jsx)(n.code,{children:"any"})," or ",(0,s.jsx)(n.code,{children:"none"})," call."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-63",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"listOf(1, 2, 3).find { it == 4 } != null\nlistOf(1, 2, 3).find { it == 4 } == null\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-56",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"listOf(1, 2, 3).any { it == 4 }\nlistOf(1, 2, 3).none { it == 4 }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"usearrayliteralsinannotations",children:"UseArrayLiteralsInAnnotations"}),"\n",(0,s.jsx)(n.p,{children:"This rule detects annotations which use the arrayOf(...) syntax instead of the array literal [...] syntax.\nThe latter should be preferred as it is more readable."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-64",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'@PositiveCase(arrayOf("..."))\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-57",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'@NegativeCase(["..."])\n'})}),"\n",(0,s.jsx)(n.h3,{id:"usechecknotnull",children:"UseCheckNotNull"}),"\n",(0,s.jsxs)(n.p,{children:["Turn on this rule to flag ",(0,s.jsx)(n.code,{children:"check"})," calls for not-null check that can be replaced with a ",(0,s.jsx)(n.code,{children:"checkNotNull"})," call."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-65",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"check(x != null)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-58",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"checkNotNull(x)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"usecheckorerror",children:"UseCheckOrError"}),"\n",(0,s.jsx)(n.p,{children:"Kotlin provides a concise way to check invariants as well as pre- and post-conditions.\nPrefer them instead of manually throwing an IllegalStateException."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-66",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'if (value == null) throw IllegalStateException("value should not be null")\nif (value < 0) throw IllegalStateException("value is $value but should be at least 0")\nwhen(a) {\n    1 -> doSomething()\n    else -> throw IllegalStateException("Unexpected value")\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-59",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'checkNotNull(value) { "value should not be null" }\ncheck(value >= 0) { "value is $value but should be at least 0" }\nwhen(a) {\n    1 -> doSomething()\n    else -> error("Unexpected value")\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"usedataclass",children:"UseDataClass"}),"\n",(0,s.jsxs)(n.p,{children:["Classes that simply hold data should be refactored into a ",(0,s.jsx)(n.code,{children:"data class"}),". Data classes are specialized to hold data\nand generate ",(0,s.jsx)(n.code,{children:"hashCode"}),", ",(0,s.jsx)(n.code,{children:"equals"})," and ",(0,s.jsx)(n.code,{children:"toString"})," implementations as well."]}),"\n",(0,s.jsxs)(n.p,{children:["Read more about ",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/data-classes.html",children:"data classes"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-29",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.del,{children:(0,s.jsx)(n.code,{children:"excludeAnnotatedClasses"})})," (default: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deprecated"}),": Use ",(0,s.jsx)(n.code,{children:"ignoreAnnotated"})," instead"]}),"\n",(0,s.jsx)(n.p,{children:"allows to provide a list of annotations that disable this check"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowVars"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"allows to relax this rule in order to exclude classes that contains one (or more) vars"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-67",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class DataClassCandidate(val i: Int) {\n    val i2: Int = 0\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-60",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"data class DataClass(val i: Int, val i2: Int)\n\n// classes with delegating interfaces are compliant\ninterface I\nclass B() : I\nclass A(val b: B) : I by b\n"})}),"\n",(0,s.jsx)(n.h3,{id:"useemptycounterpart",children:"UseEmptyCounterpart"}),"\n",(0,s.jsx)(n.p,{children:'Instantiation of an object\'s "empty" state should use the object\'s "empty" initializer for clarity purposes.'}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-68",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"arrayOf()\nlistOf() // or listOfNotNull()\nmapOf()\nsequenceOf()\nsetOf()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-61",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"emptyArray()\nemptyList()\nemptyMap()\nemptySequence()\nemptySet()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"useifemptyorifblank",children:"UseIfEmptyOrIfBlank"}),"\n",(0,s.jsxs)(n.p,{children:["This rule detects ",(0,s.jsx)(n.code,{children:"isEmpty"})," or ",(0,s.jsx)(n.code,{children:"isBlank"})," calls to assign a default value. They can be replaced with ",(0,s.jsx)(n.code,{children:"ifEmpty"})," or\n",(0,s.jsx)(n.code,{children:"ifBlank"})," calls."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-69",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun test(list: List<Int>, s: String) {\n    val a = if (list.isEmpty()) listOf(1) else list\n    val b = if (list.isNotEmpty()) list else listOf(2)\n    val c = if (s.isBlank()) "foo" else s\n    val d = if (s.isNotBlank()) s else "bar"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-62",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun test(list: List<Int>, s: String) {\n    val a = list.ifEmpty { listOf(1) }\n    val b = list.ifEmpty { listOf(2) }\n    val c = s.ifBlank { "foo" }\n    val d = s.ifBlank { "bar" }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"useifinsteadofwhen",children:"UseIfInsteadOfWhen"}),"\n",(0,s.jsxs)(n.p,{children:["Binary expressions are better expressed using an ",(0,s.jsx)(n.code,{children:"if"})," expression than a ",(0,s.jsx)(n.code,{children:"when"})," expression."]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://kotlinlang.org/docs/coding-conventions.html#if-versus-when",children:"if versus when"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-30",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreWhenContainingVariableDeclaration"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"ignores when statements with a variable declaration used in the subject"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-70",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"when (x) {\n    null -> true\n    else -> false\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-63",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"if (x == null) true else false\n"})}),"\n",(0,s.jsx)(n.h3,{id:"useisnullorempty",children:"UseIsNullOrEmpty"}),"\n",(0,s.jsxs)(n.p,{children:["This rule detects null or empty checks that can be replaced with ",(0,s.jsx)(n.code,{children:"isNullOrEmpty()"})," call."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-71",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun foo(x: List<Int>?) {\n    if (x == null || x.isEmpty()) return\n}\nfun bar(x: List<Int>?) {\n    if (x == null || x.count() == 0) return\n}\nfun baz(x: List<Int>?) {\n    if (x == null || x.size == 0) return\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-64",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"if (x.isNullOrEmpty()) return\n"})}),"\n",(0,s.jsx)(n.h3,{id:"uselet",children:"UseLet"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"if"})," expressions that either check for not-null and return ",(0,s.jsx)(n.code,{children:"null"})," in the false case or check for ",(0,s.jsx)(n.code,{children:"null"})," and returns\n",(0,s.jsx)(n.code,{children:"null"})," in the truthy case are better represented as ",(0,s.jsx)(n.code,{children:"?.let {}"})," blocks."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-72",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"if (x != null) { x.transform() } else null\nif (x == null) null else y\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-65",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"x?.let { it.transform() }\nx?.let { y }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"useorempty",children:"UseOrEmpty"}),"\n",(0,s.jsxs)(n.p,{children:["This rule detects ",(0,s.jsx)(n.code,{children:"?: emptyList()"})," that can be replaced with ",(0,s.jsx)(n.code,{children:"orEmpty()"})," call."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-73",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'fun test(x: List<Int>?, s: String?) {\n    val a = x ?: emptyList()\n    val b = s ?: ""\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-66",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun test(x: List<Int>?, s: String?) {\n    val a = x.orEmpty()\n    val b = s.orEmpty()\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"userequire",children:"UseRequire"}),"\n",(0,s.jsx)(n.p,{children:"Kotlin provides a much more concise way to check preconditions than to manually throw an\nIllegalArgumentException."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-74",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'if (value == null) throw IllegalArgumentException("value should not be null")\nif (value < 0) throw IllegalArgumentException("value is $value but should be at least 0")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-67",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'requireNotNull(value) { "value should not be null" }\nrequire(value >= 0) { "value is $value but should be at least 0" }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"userequirenotnull",children:"UseRequireNotNull"}),"\n",(0,s.jsxs)(n.p,{children:["Turn on this rule to flag ",(0,s.jsx)(n.code,{children:"require"})," calls for not-null check that can be replaced with a ",(0,s.jsx)(n.code,{children:"requireNotNull"})," call."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.21.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-75",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"require(x != null)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-68",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"requireNotNull(x)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"usesumofinsteadofflatmapsize",children:"UseSumOfInsteadOfFlatMapSize"}),"\n",(0,s.jsxs)(n.p,{children:["Turn on this rule to flag ",(0,s.jsx)(n.code,{children:"flatMap"})," and ",(0,s.jsx)(n.code,{children:"size/count"})," calls that can be replaced with a ",(0,s.jsx)(n.code,{children:"sumOf"})," call."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": No"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-76",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class Foo(val foo: List<Int>)\nlist.flatMap { it.foo }.size\nlist.flatMap { it.foo }.count()\nlist.flatMap { it.foo }.count { it > 2 }\nlistOf(listOf(1), listOf(2, 3)).flatten().size\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-69",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"list.sumOf { it.foo.size }\nlist.sumOf { it.foo.count() }\nlist.sumOf { it.foo.count { foo -> foo > 2 } }\nlistOf(listOf(1), listOf(2, 3)).sumOf { it.size }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"uselesscallonnotnull",children:"UselessCallOnNotNull"}),"\n",(0,s.jsx)(n.p,{children:"The Kotlin stdlib provides some functions that are designed to operate on references that may be null. These\nfunctions can also be called on non-nullable references or on collections or sequences that are known to be empty -\nthe calls are redundant in this case and can be removed or should be changed to a call that does not check whether\nthe value is null or not."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-77",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val testList = listOf("string").orEmpty()\nval testList2 = listOf("string").orEmpty().map { _ }\nval testList3 = listOfNotNull("string")\nval testString = ""?.isNullOrBlank()\n'})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-70",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val testList = listOf("string")\nval testList2 = listOf("string").map { }\nval testList3 = listOf("string")\nval testString = ""?.isBlank()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"utilityclasswithpublicconstructor",children:"UtilityClassWithPublicConstructor"}),"\n",(0,s.jsxs)(n.p,{children:["A class which only contains utility variables and functions with no concrete implementation can be refactored\ninto an ",(0,s.jsx)(n.code,{children:"object"})," or a class with a non-public constructor.\nFurthermore, this rule reports utility classes which are not final."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.2.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-78",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class UtilityClassViolation {\n\n    // public constructor here\n    constructor() {\n        // ...\n    }\n\n    companion object {\n        val i = 0\n    }\n}\n\nopen class UtilityClassViolation private constructor() {\n\n    // ...\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-71",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"class UtilityClass {\n\n    private constructor() {\n        // ...\n    }\n\n    companion object {\n        val i = 0\n    }\n}\nobject UtilityClass {\n\n    val i = 0\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"varcouldbeval",children:"VarCouldBeVal"}),"\n",(0,s.jsx)(n.p,{children:"Reports var declarations (both local variables and private class properties) that could be val,\nas they are not re-assigned. Val declarations are assign-once (read-only), which makes understanding\nthe current state easier."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.16.0"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requires Type Resolution"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Aliases"}),": CanBeVal"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-31",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ignoreLateinitVar"})," (default: ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Whether to ignore uninitialized lateinit vars"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-79",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun example() {\n    var i = 1 // violation: this variable is never re-assigned\n    val j = i + 1\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-72",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"fun example() {\n    val i = 1\n    val j = i + 1\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"wildcardimport",children:"WildcardImport"}),"\n",(0,s.jsx)(n.p,{children:"Wildcard imports should be replaced with imports using fully qualified class names. This helps increase clarity of\nwhich classes are imported and helps prevent naming conflicts."}),"\n",(0,s.jsx)(n.p,{children:"Library updates can introduce naming clashes with your own classes which might result in compilation errors."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE"}),": This rule has a twin implementation NoWildcardImports in the formatting rule set (a wrapped KtLint rule).\nWhen suppressing an issue of WildcardImport in the baseline file, make sure to suppress the corresponding NoWildcardImports issue."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Debt"}),": 5min"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-options-32",children:"Configuration options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"excludeImports"})," (default: ",(0,s.jsx)(n.code,{children:"['java.util.*']"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Define a list of package names that should be allowed to be imported with wildcard imports."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"noncompliant-code-80",children:"Noncompliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"import io.gitlab.arturbosch.detekt.*\n\nclass DetektElements {\n    val element1 = DetektElement1()\n    val element2 = DetektElement2()\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"compliant-code-73",children:"Compliant Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"import io.gitlab.arturbosch.detekt.DetektElement1\nimport io.gitlab.arturbosch.detekt.DetektElement2\n\nclass DetektElements {\n    val element1 = DetektElement1()\n    val element2 = DetektElement2()\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var l=i(96540);const s={},o=l.createContext(s);function t(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);