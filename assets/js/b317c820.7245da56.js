"use strict";(self.webpackChunk_detekt_website=self.webpackChunk_detekt_website||[]).push([[5673],{99485:(e,n,t)=>{t.d(n,{K:()=>o});var s=t(68957),i=t(99752),r=t(74848);function o(){const e=(0,i.ir)(),n=`https://github.com/detekt/detekt/blob/${"current"===e.name?"main":`v${e.name}`}/detekt-core/src/main/resources/default-detekt-config.yml`;return(0,r.jsx)(s.A,{href:n,children:"default-detekt-config.yml"})}},16007:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"introduction/configurations","title":"detekt Configuration File","description":"detekt uses a YAML style configuration file for various things:","source":"@site/docs/introduction/configurations.mdx","sourceDirName":"introduction","slug":"/introduction/configurations","permalink":"/docs/next/introduction/configurations","draft":false,"unlisted":false,"editUrl":"https://github.com/detekt/detekt/edit/main/website/docs/introduction/configurations.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"configurations","title":"detekt Configuration File","keywords":["config","configuration","yaml"],"permalink":"configurations.html","sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Welcome","permalink":"/docs/next/intro"},"next":{"title":"Reporting","permalink":"/docs/next/introduction/reporting"}}');var i=t(74848),r=t(28453),o=t(99485);const l={id:"configurations",title:"detekt Configuration File",keywords:["config","configuration","yaml"],permalink:"configurations.html",sidebar_position:3},a=void 0,c={},d=[{value:"Config validation",id:"config-validation",level:2},{value:"Rule sets and rules",id:"rule-sets-and-rules",level:2},{value:"Path Filters / Excludes / Includes",id:"path-filters--excludes--includes",level:3},{value:"Severity",id:"severity",level:3},{value:"Aliases",id:"aliases",level:3},{value:"Build failure",id:"build-failure",level:2},{value:"Console Reports",id:"console-reports",level:2},{value:"Output Reports",id:"output-reports",level:2},{value:"Processors",id:"processors",level:2},{value:"Config JSON Schema",id:"config-json-schema",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"detekt"})," uses a ",(0,i.jsx)(n.a,{href:"https://yaml.org/spec/1.2/spec.html",children:"YAML style configuration"})," file for various things:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"rule set and rule properties"}),"\n",(0,i.jsx)(n.li,{children:"build failure"}),"\n",(0,i.jsx)(n.li,{children:"console reports"}),"\n",(0,i.jsx)(n.li,{children:"output reports"}),"\n",(0,i.jsx)(n.li,{children:"processors"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(o.K,{})," file for all defined configuration options and their default values."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Note:"})," When using a custom config file, the default values are ignored unless you also set the ",(0,i.jsx)(n.code,{children:"--build-upon-default-config"})," flag."]}),"\n",(0,i.jsx)(n.h2,{id:"config-validation",children:"Config validation"}),"\n",(0,i.jsxs)(n.p,{children:["If config validation is enabled, ",(0,i.jsx)(n.em,{children:"detekt"})," will verify that your configuration file is structured correctly and all first party rule sets, rules and configuration options are valid and not marked as deprecated."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"config:\n  validation: true\n  warningsAsErrors: false\n  excludes: ''\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Invalid or deprecated rules and configuration options are by default printed as warnings unless ",(0,i.jsx)(n.code,{children:"warningsAsErrors"})," is set to ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Note:"})," Custom rules sets are excluded from config validation by default."]}),"\n",(0,i.jsxs)(n.p,{children:["If you have extended ",(0,i.jsx)(n.em,{children:"detekt"})," and rely on a custom properties, you will need to exclude those from config validation by adding their paths to the ",(0,i.jsx)(n.code,{children:"excludes"})," attribute. Multiple values are separated by comma and ",(0,i.jsx)(n.code,{children:".*"})," can be used as a wildcard (e.g. ",(0,i.jsx)(n.code,{children:"propA,build>.*>propB"}),")."]}),"\n",(0,i.jsx)(n.h2,{id:"rule-sets-and-rules",children:"Rule sets and rules"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"detekt"})," allows easily to just pick the rules you want and configure them the way you like.\nFor example if you want to allow up to 20 functions inside a Kotlin file instead of the default threshold, write:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"complexity:\n  TooManyFunctions:\n    thresholdInFiles: 20\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To read about all supported rule sets and rules, use the side navigation ",(0,i.jsx)(n.code,{children:"Rule Sets"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"path-filters--excludes--includes",children:"Path Filters / Excludes / Includes"}),"\n",(0,i.jsxs)(n.p,{children:["Fine grained path filters can be defined for each rule or rule set through globbing patterns.\nThis gives the user more freedom in analyzing only specific files\nand rule authors the ability to write ",(0,i.jsx)(n.em,{children:"library only"})," rules."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"complexity:\n  TooManyFunctions:\n    ...\n    excludes: ['**/internal/**']\n    includes: ['**/internal/util/NeedsToBeChecked.kt']\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In case you want to apply the same filters for different rules, you can use\n",(0,i.jsx)(n.a,{href:"https://yaml.org/spec/1.2/spec.html#id2785586",children:"YAML anchors and aliases"})," to reapply previously defined paths."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"naming:\n  ClassNaming:\n    ...\n    excludes: &testFolders\n      - '**/test/**'\n      - '**/androidTest/**'\n  ConstructorParameterNaming:\n    ...\n    excludes: *testFolders\n"})}),"\n",(0,i.jsx)(n.h3,{id:"severity",children:"Severity"}),"\n",(0,i.jsxs)(n.p,{children:["By default, all findings have a severity of ",(0,i.jsx)(n.code,{children:"error"})," but is possible to configure the severity of each rule to fit\nyour CI policy with respects to errors. You may specify the severity level in the config file at the rule or ruleset\nlevel:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"empty-blocks:\n    active: true\n    severity: error\n    EmptyCatchBlock:\n        active: true\n        severity: info\n"})}),"\n",(0,i.jsx)(n.p,{children:"The severity will be computed in the priority order:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Severity of the rule if exists"}),"\n",(0,i.jsx)(n.li,{children:"Severity of the parent ruleset if exists"}),"\n",(0,i.jsx)(n.li,{children:"Default severity: error"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"aliases",children:"Aliases"}),"\n",(0,i.jsxs)(n.p,{children:["Each rule can have a list of aliases. Those aliases will be used as new identifiers for that rule so they can be used\nto suppress the rules of that function with a different name in the annotations ",(0,i.jsx)(n.code,{children:"@Suppress"}),". This is handy when you use\nmore analysis tools than detekt. In those cases there can be rules that overlap. In those cases you can set an alias\nwith the name of the other rule. This way you will only need to suppress the issue once instead of once per analysis\ntool. Example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"complexity:\n  CyclomaticComplexMethod:\n    active: true\n    aliases: ['ComplexMethod']\n"})}),"\n",(0,i.jsx)(n.p,{children:"By default detekt gives some default aliases to avoid repetition with the kotlin compiler or with IntelliJ. If you find\ncollisions with one of those you can open an issue because, probably, we will update the default configuration so\neveryone can benefit from it."}),"\n",(0,i.jsx)(n.h2,{id:"build-failure",children:"Build failure"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"detekt"})," will fail your build if there is at least one issue with a severity of error. You can lower that threshold\nor completely disable build failures by using the ",(0,i.jsx)(n.code,{children:"failOnSeverity"})," setting. Details can be found in the\n",(0,i.jsx)(n.a,{href:"/docs/gettingstarted/gradle",children:"gradle"})," and the ",(0,i.jsx)(n.a,{href:"/docs/gettingstarted/cli",children:"cli"})," sections."]}),"\n",(0,i.jsx)(n.h2,{id:"console-reports",children:"Console Reports"}),"\n",(0,i.jsx)(n.p,{children:"Uncomment the reports you don't care about."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"console-reports:\n  active: true\n  exclude:\n  #  - 'ProjectStatisticsReport'\n  #  - 'ComplexityReport'\n  #  - 'NotificationReport'\n  #  - 'FindingsReport'\n  #  - 'FileBasedFindingsReport'\n  #  - 'LiteFindingsReport'\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ProjectStatisticsReport"})," contains metrics and statistics concerning the analyzed project sorted by priority."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ComplexityReport"})," contains metrics concerning the analyzed code.\nFor instance the source lines of code and the McCabe complexity are calculated."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NotificationReport"})," contains notifications reported by the detekt analyzer similar to push notifications.\nIt's simply a way of alerting users to information that they have opted-in to."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"FindingsReport"})," contains all rule violations in a list format grouped by ruleset."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"FileBasedFindingsReport"})," is similar to the FindingsReport shown above.\nThe rule violations are grouped by file location."]}),"\n",(0,i.jsx)(n.h2,{id:"output-reports",children:"Output Reports"}),"\n",(0,i.jsxs)(n.p,{children:["Uncomment the reports you don't care about. The detailed description can be found in ",(0,i.jsx)(n.a,{href:"/docs/next/introduction/reporting",children:"reporting"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"output-reports:\n  active: true\n  exclude:\n  #  - 'HtmlOutputReport'\n  #  - 'XmlOutputReport'\n  #  - 'sarif'\n  #  - 'MdOutputReport'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"processors",children:"Processors"}),"\n",(0,i.jsx)(n.p,{children:"Count processors are used to calculate project metrics.\nFor example, when all count processors are enabled, a detekt html report might look like this:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Processor metrics in html report",src:t(70585).A+"",width:"251",height:"222"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"'DetektProgressListener'"})," processor shows a progress indicator in stdout while a detekt process is running."]}),"\n",(0,i.jsx)(n.p,{children:"Uncomment the processors you don't care about."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"processors:\n    active: true\n    exclude:\n        - 'DetektProgressListener'\n        # - 'KtFileCountProcessor'\n        # - 'PackageCountProcessor'\n        # - 'ClassCountProcessor'\n        # - 'FunctionCountProcessor'\n        # - 'PropertyCountProcessor'\n        # - 'ProjectComplexityProcessor'\n        # - 'ProjectCognitiveComplexityProcessor'\n        # - 'ProjectLLOCProcessor'\n        # - 'ProjectCLOCProcessor'\n        # - 'ProjectLOCProcessor'\n        # - 'ProjectSLOCProcessor'\n        # - 'LicenseHeaderLoaderExtension'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"config-json-schema",children:"Config JSON Schema"}),"\n",(0,i.jsxs)(n.p,{children:["A JSON Schema for the config file is available on: ",(0,i.jsx)(n.a,{href:"https://json.schemastore.org/detekt-1.22.0.json",children:"json.schemastore.org/detekt-1.22.0.json"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can configure your IDE (e.g. IntelliJ or Android Studio have built-in support)\nto use that schema to give you ",(0,i.jsx)(n.strong,{children:"autocompletion"})," capabilities on your config file.\nMore details on the IntelliJ support are available\n",(0,i.jsx)(n.a,{href:"https://www.jetbrains.com/help/ruby/yaml.html#remote_json",children:"on this page"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"JSON Schema validator on IntelliJ",src:t(18347).A+"",width:"1316",height:"206"})}),"\n",(0,i.jsxs)(n.p,{children:["The JSON Schema is currently not automatically generated. It can be updated manually ",(0,i.jsx)(n.a,{href:"https://github.com/SchemaStore/schemastore",children:"on this repository"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},18347:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/json_schema_validator_intellij-fdd7afa5537d8f382350f080b65c1517.png"},70585:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/processor_metrics_in_html_report-26660d58745fbc61810ca2eee63b6993.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);