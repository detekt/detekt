"use strict";(self.webpackChunk_detekt_website=self.webpackChunk_detekt_website||[]).push([[5779],{11690:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rules/empty-blocks","title":"Empty-blocks Rule Set","description":"The empty-blocks ruleset contains rules that will report empty blocks of code","source":"@site/docs/rules/empty-blocks.md","sourceDirName":"rules","slug":"/rules/empty-blocks","permalink":"/docs/next/rules/empty-blocks","draft":false,"unlisted":false,"editUrl":"https://github.com/detekt/detekt/edit/main/website/docs/rules/empty-blocks.md","tags":[],"version":"current","frontMatter":{"title":"Empty-blocks Rule Set","sidebar":"home_sidebar","keywords":["rules","empty-blocks"],"permalink":"empty-blocks.html","toc":true,"folder":"documentation"},"sidebar":"defaultSidebar","previous":{"title":"Coroutines Rule Set","permalink":"/docs/next/rules/coroutines"},"next":{"title":"Exceptions Rule Set","permalink":"/docs/next/rules/exceptions"}}');var s=n(74848),l=n(28453);const c={title:"Empty-blocks Rule Set",sidebar:"home_sidebar",keywords:["rules","empty-blocks"],permalink:"empty-blocks.html",toc:!0,folder:"documentation"},i=void 0,r={},d=[{value:"EmptyCatchBlock",id:"emptycatchblock",level:3},{value:"Configuration options:",id:"configuration-options",level:4},{value:"EmptyClassBlock",id:"emptyclassblock",level:3},{value:"EmptyDefaultConstructor",id:"emptydefaultconstructor",level:3},{value:"EmptyDoWhileBlock",id:"emptydowhileblock",level:3},{value:"EmptyElseBlock",id:"emptyelseblock",level:3},{value:"EmptyFinallyBlock",id:"emptyfinallyblock",level:3},{value:"EmptyForBlock",id:"emptyforblock",level:3},{value:"EmptyFunctionBlock",id:"emptyfunctionblock",level:3},{value:"Configuration options:",id:"configuration-options-1",level:4},{value:"EmptyIfBlock",id:"emptyifblock",level:3},{value:"EmptyInitBlock",id:"emptyinitblock",level:3},{value:"EmptyKotlinFile",id:"emptykotlinfile",level:3},{value:"EmptySecondaryConstructor",id:"emptysecondaryconstructor",level:3},{value:"EmptyTryBlock",id:"emptytryblock",level:3},{value:"EmptyWhenBlock",id:"emptywhenblock",level:3},{value:"EmptyWhileBlock",id:"emptywhileblock",level:3}];function p(e){const o={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.p,{children:"The empty-blocks ruleset contains rules that will report empty blocks of code\nwhich should be avoided."}),"\n",(0,s.jsx)(o.h3,{id:"emptycatchblock",children:"EmptyCatchBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"catch"})," blocks. Empty catch blocks indicate that an exception is ignored and not handled.\nIn case exceptions are ignored intentionally, this should be made explicit\nby using the specified names in the ",(0,s.jsx)(o.code,{children:"allowedExceptionNameRegex"}),"."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h4,{id:"configuration-options",children:"Configuration options:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.code,{children:"allowedExceptionNameRegex"})," (default: ",(0,s.jsx)(o.code,{children:"'_|(ignore|expected).*'"}),")"]}),"\n",(0,s.jsx)(o.p,{children:"ignores exception types which match this regex"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(o.h3,{id:"emptyclassblock",children:"EmptyClassBlock"}),"\n",(0,s.jsx)(o.p,{children:"Reports empty classes. Empty blocks of code serve no purpose and should be removed."}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptydefaultconstructor",children:"EmptyDefaultConstructor"}),"\n",(0,s.jsx)(o.p,{children:"Reports empty default constructors. Empty blocks of code serve no purpose and should be removed."}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptydowhileblock",children:"EmptyDoWhileBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"do"}),"/",(0,s.jsx)(o.code,{children:"while"})," loops. Empty blocks of code serve no purpose and should be removed."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptyelseblock",children:"EmptyElseBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"else"})," blocks. Empty blocks of code serve no purpose and should be removed."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptyfinallyblock",children:"EmptyFinallyBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"finally"})," blocks. Empty blocks of code serve no purpose and should be removed."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptyforblock",children:"EmptyForBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"for"})," loops. Empty blocks of code serve no purpose and should be removed."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptyfunctionblock",children:"EmptyFunctionBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty functions. Empty blocks of code serve no purpose and should be removed.\nThis rule will not report functions with the override modifier that have a comment as their only body contents\n(e.g., a ",(0,s.jsx)(o.code,{children:"// no-op"})," comment in an unused listener function)."]}),"\n",(0,s.jsxs)(o.p,{children:["Set the ",(0,s.jsx)(o.code,{children:"ignoreOverridden"})," parameter to ",(0,s.jsx)(o.code,{children:"true"})," to exclude all functions which are overriding other\nfunctions from the superclass or from an interface (i.e., functions declared with the override modifier)."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h4,{id:"configuration-options-1",children:"Configuration options:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsxs)(o.li,{children:["\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.code,{children:"ignoreOverridden"})," (default: ",(0,s.jsx)(o.code,{children:"false"}),")"]}),"\n",(0,s.jsx)(o.p,{children:"Excludes all the overridden functions"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(o.h3,{id:"emptyifblock",children:"EmptyIfBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"if"})," blocks. Empty blocks of code serve no purpose and should be removed."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptyinitblock",children:"EmptyInitBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"init"})," expressions. Empty blocks of code serve no purpose and should be removed."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptykotlinfile",children:"EmptyKotlinFile"}),"\n",(0,s.jsx)(o.p,{children:"Reports empty Kotlin (.kt, .kts) files. Empty blocks of code serve no purpose and should be removed."}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptysecondaryconstructor",children:"EmptySecondaryConstructor"}),"\n",(0,s.jsx)(o.p,{children:"Reports empty secondary constructors. Empty blocks of code serve no purpose and should be removed."}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptytryblock",children:"EmptyTryBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"try"})," blocks. Empty blocks of code serve no purpose and should be removed."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.6.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptywhenblock",children:"EmptyWhenBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"when"})," expressions. Empty blocks of code serve no purpose and should be removed."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]}),"\n",(0,s.jsx)(o.h3,{id:"emptywhileblock",children:"EmptyWhileBlock"}),"\n",(0,s.jsxs)(o.p,{children:["Reports empty ",(0,s.jsx)(o.code,{children:"while"})," expressions. Empty blocks of code serve no purpose and should be removed."]}),"\n",(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.strong,{children:"Active by default"}),": Yes - Since v1.0.0"]})]})}function h(e={}){const{wrapper:o}={...(0,l.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>c,x:()=>i});var t=n(96540);const s={},l=t.createContext(s);function c(e){const o=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(l.Provider,{value:o},e.children)}}}]);