mainClassName = 'io.gitlab.arturbosch.detekt.generator.Main'

jar {
    manifest {
        attributes 'Main-Class': 'io.gitlab.arturbosch.detekt.generator.Main'
    }
}

configurations {
    // implementation.extendsFrom kotlin is not enough for using cli in a gradle task - #58
    testImplementation.extendsFrom kotlinTest
}

task generateDocumentation(dependsOn: ":detekt-generator:shadowJar") {
    description "Generates detekt documentation and the default config.yml based on Rule KDoc"

    inputs.files(
            fileTree("$rootProject.rootDir/detekt-rules/src/main/kotlin"),
            file("$rootProject.rootDir/detekt-generator/build/libs/detekt-generator-$detektVersion-all.jar"))
    outputs.files(
            fileTree("$rootProject.rootDir/docs/pages/documentation"),
            file("$rootProject.rootDir/detekt-cli/src/main/resources/default-detekt-config.yml"))

    doLast {
        javaexec {
            main = "-jar"
            args = [
                    "$rootProject.rootDir/detekt-generator/build/libs/detekt-generator-$detektVersion-all.jar",
                    "--input",
                    "$rootProject.rootDir/detekt-rules/src/main/kotlin",
                    "--documentation",
                    "$rootProject.rootDir/docs/pages/documentation",
                    "--config",
                    "$rootProject.rootDir/detekt-cli/src/main/resources"
            ]
        }
    }
}

task verifyGeneratorOutput(dependsOn: [":detekt-generator:shadowJar", ":detekt-generator:generateDocumentation"]) {
    description "Verifies that all documentation and the config.yml are up-to-date"
    doLast {
        assertDefaultConfigUpToDate()
        assertDocumentationUpToDate()
    }
}

def assertDefaultConfigUpToDate() {
    def configDiff = new ByteArrayOutputStream()
    exec {
        commandLine "git", "diff", "$rootProject.rootDir/detekt-cli/src/main/resources/default-detekt-config.yml"
        standardOutput = configDiff
    }

    if (!configDiff.toString().isEmpty()) {
        throw new GradleException("The default-detekt-config.yml is not up-to-date. " +
                "Please build detekt locally to update it.")
    }
}

def assertDocumentationUpToDate() {
    def configDiff = new ByteArrayOutputStream()
    exec {
        commandLine "git", "diff", "$rootProject.rootDir/docs/pages/documentation"
        standardOutput = configDiff
    }

    if (!configDiff.toString().isEmpty()) {
        throw new GradleException("The detekt documentation is not up-to-date. " +
                "Please build detekt locally to update it.")
    }
}

dependencies {
    implementation project(':detekt-core')
    implementation project(':detekt-rules')
    implementation "com.beust:jcommander:$jcommanderVersion"
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"

    testImplementation project(':detekt-test')
    testRuntime "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    testRuntime "org.junit.platform:junit-platform-console:$junitPlatformVersion"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
}
