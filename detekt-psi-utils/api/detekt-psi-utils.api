public final class io/github/detekt/psi/FilePath {
	public static final field Companion Lio/github/detekt/psi/FilePath$Companion;
	public fun <init> (Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;)V
	public synthetic fun <init> (Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/nio/file/Path;
	public final fun component2 ()Ljava/nio/file/Path;
	public final fun component3 ()Ljava/nio/file/Path;
	public final fun copy (Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;)Lio/github/detekt/psi/FilePath;
	public static synthetic fun copy$default (Lio/github/detekt/psi/FilePath;Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;ILjava/lang/Object;)Lio/github/detekt/psi/FilePath;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAbsolutePath ()Ljava/nio/file/Path;
	public final fun getBasePath ()Ljava/nio/file/Path;
	public final fun getRelativePath ()Ljava/nio/file/Path;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/detekt/psi/FilePath$Companion {
	public final fun fromAbsolute (Ljava/nio/file/Path;)Lio/github/detekt/psi/FilePath;
	public final fun fromRelative (Ljava/nio/file/Path;Ljava/nio/file/Path;)Lio/github/detekt/psi/FilePath;
}

public final class io/github/detekt/psi/KeysKt {
	public static final fun getBASE_PATH ()Lorg/jetbrains/kotlin/com/intellij/openapi/util/Key;
	public static final fun getLINE_SEPARATOR ()Lorg/jetbrains/kotlin/com/intellij/openapi/util/Key;
	public static final fun getRELATIVE_PATH ()Lorg/jetbrains/kotlin/com/intellij/openapi/util/Key;
}

public final class io/github/detekt/psi/KtFilesKt {
	public static final field KOTLIN_SCRIPT_SUFFIX Ljava/lang/String;
	public static final field KOTLIN_SUFFIX Ljava/lang/String;
	public static final fun absolutePath (Lorg/jetbrains/kotlin/com/intellij/psi/PsiFile;)Ljava/nio/file/Path;
	public static final fun basePath (Lorg/jetbrains/kotlin/com/intellij/psi/PsiFile;)Ljava/nio/file/Path;
	public static final fun fileNameWithoutSuffix (Lorg/jetbrains/kotlin/com/intellij/psi/PsiFile;)Ljava/lang/String;
	public static final fun getFileName (Lorg/jetbrains/kotlin/com/intellij/psi/PsiFile;)Ljava/lang/String;
	public static final fun relativePath (Lorg/jetbrains/kotlin/com/intellij/psi/PsiFile;)Ljava/nio/file/Path;
	public static final fun toFilePath (Lorg/jetbrains/kotlin/com/intellij/psi/PsiFile;)Lio/github/detekt/psi/FilePath;
	public static final fun toUnifiedString (Ljava/nio/file/Path;)Ljava/lang/String;
}

public final class io/gitlab/arturbosch/detekt/rules/AllowedExceptionNamePatternKt {
	public static final field ALLOWED_EXCEPTION_NAME Ljava/lang/String;
	public static final fun isAllowedExceptionName (Lorg/jetbrains/kotlin/psi/KtCatchClause;Lkotlin/text/Regex;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/GuardClausesKt {
	public static final fun isElvisOperatorGuardClause (Lorg/jetbrains/kotlin/psi/KtExpression;)Z
	public static final synthetic fun isGuardClause (Lorg/jetbrains/kotlin/psi/KtExpression;)Z
	public static final fun isIfConditionGuardClause (Lorg/jetbrains/kotlin/psi/KtExpression;Lorg/jetbrains/kotlin/psi/KtExpression;)Z
	public static final synthetic fun yieldStatementsSkippingGuardClauses (Lorg/jetbrains/kotlin/psi/KtNamedFunction;)Lkotlin/sequences/Sequence;
}

public final class io/gitlab/arturbosch/detekt/rules/IdentifierNameKt {
	public static final fun identifierName (Lorg/jetbrains/kotlin/psi/KtNamedDeclaration;)Ljava/lang/String;
}

public final class io/gitlab/arturbosch/detekt/rules/IsPartOfUtilsKt {
	public static final synthetic fun isPartOf (Lorg/jetbrains/kotlin/com/intellij/psi/PsiElement;)Z
	public static final fun isPartOfString (Lorg/jetbrains/kotlin/com/intellij/psi/PsiElement;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/JunkKt {
	public static final fun companionObject (Lorg/jetbrains/kotlin/psi/KtClass;)Lorg/jetbrains/kotlin/psi/KtObjectDeclaration;
	public static final fun getIntValueForPsiElement (Lorg/jetbrains/kotlin/com/intellij/psi/PsiElement;)Ljava/lang/Integer;
	public static final fun hasCommentInside (Lorg/jetbrains/kotlin/com/intellij/psi/PsiElement;)Z
	public static final fun hasCommentInside (Lorg/jetbrains/kotlin/psi/KtClassOrObject;)Z
	public static final fun isUsedForNesting (Lorg/jetbrains/kotlin/psi/KtCallExpression;)Z
	public static final fun receiverIsUsed (Lorg/jetbrains/kotlin/psi/KtCallExpression;Lorg/jetbrains/kotlin/resolve/BindingContext;)Z
	public static final synthetic fun safeAs (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class io/gitlab/arturbosch/detekt/rules/KeywordsKt {
	public static final field IT_LITERAL Ljava/lang/String;
	public static final field LET_LITERAL Ljava/lang/String;
}

public final class io/gitlab/arturbosch/detekt/rules/KtAnnotatedExtensionsKt {
	public static final fun hasAnnotation (Lorg/jetbrains/kotlin/psi/KtAnnotated;[Ljava/lang/String;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/KtBinaryExpressionKt {
	public static final fun isNonNullCheck (Lorg/jetbrains/kotlin/psi/KtBinaryExpression;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/KtCallExpressionKt {
	public static final fun isCalling (Lorg/jetbrains/kotlin/psi/KtCallExpression;Lorg/jetbrains/kotlin/name/FqName;Lorg/jetbrains/kotlin/resolve/BindingContext;)Z
	public static final fun isCallingWithNonNullCheckArgument (Lorg/jetbrains/kotlin/psi/KtCallExpression;Lorg/jetbrains/kotlin/name/FqName;Lorg/jetbrains/kotlin/resolve/BindingContext;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/KtLambdaExpressionKt {
	public static final fun hasImplicitParameterReference (Lorg/jetbrains/kotlin/psi/KtLambdaExpression;Lorg/jetbrains/kotlin/descriptors/ValueParameterDescriptor;Lorg/jetbrains/kotlin/resolve/BindingContext;)Z
	public static final fun implicitParameter (Lorg/jetbrains/kotlin/psi/KtLambdaExpression;Lorg/jetbrains/kotlin/resolve/BindingContext;)Lorg/jetbrains/kotlin/descriptors/ValueParameterDescriptor;
}

public final class io/gitlab/arturbosch/detekt/rules/KtModifierListKt {
	public static final fun isAbstract (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isActual (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isConstant (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isExpect (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isExternal (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isInline (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isInternal (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isLateinit (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isOpen (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isOperator (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isOverride (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
	public static final fun isPublicNotOverridden (Lorg/jetbrains/kotlin/psi/KtModifierListOwner;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/KtValueArgumentKt {
	public static final fun isEmptyOrSingleStringArgument (Ljava/util/List;Lorg/jetbrains/kotlin/resolve/BindingContext;)Z
	public static final fun isString (Lorg/jetbrains/kotlin/psi/KtValueArgument;Lorg/jetbrains/kotlin/resolve/BindingContext;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/MethodSignatureKt {
	public static final fun extractMethodNameAndParams (Ljava/lang/String;)Lkotlin/Pair;
	public static final fun hasCorrectEqualsParameter (Lorg/jetbrains/kotlin/psi/KtFunction;)Z
	public static final fun isEqualsFunction (Lorg/jetbrains/kotlin/psi/KtFunction;)Z
	public static final fun isHashCodeFunction (Lorg/jetbrains/kotlin/psi/KtFunction;)Z
	public static final fun isMainFunction (Lorg/jetbrains/kotlin/psi/KtNamedFunction;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/StringExtensionsKt {
	public static final fun lastArgumentMatchesUrl (Ljava/lang/String;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/ThrowExtensionsKt {
	public static final fun getArguments (Lorg/jetbrains/kotlin/psi/KtThrowExpression;)Ljava/util/List;
	public static final fun isEnclosedByConditionalStatement (Lorg/jetbrains/kotlin/psi/KtThrowExpression;)Z
	public static final synthetic fun isExceptionOfType (Lorg/jetbrains/kotlin/psi/KtThrowExpression;)Z
	public static final fun isIllegalArgumentException (Lorg/jetbrains/kotlin/psi/KtThrowExpression;)Z
	public static final fun isIllegalStateException (Lorg/jetbrains/kotlin/psi/KtThrowExpression;)Z
}

public final class io/gitlab/arturbosch/detekt/rules/TraversingKt {
	public static final fun isPublicInherited (Lorg/jetbrains/kotlin/psi/KtNamedDeclaration;)Z
	public static final synthetic fun parentsOfTypeUntil (Lorg/jetbrains/kotlin/psi/KtElement;Z)Lkotlin/sequences/Sequence;
	public static synthetic fun parentsOfTypeUntil$default (Lorg/jetbrains/kotlin/psi/KtElement;ZILjava/lang/Object;)Lkotlin/sequences/Sequence;
}

public final class io/gitlab/arturbosch/detekt/rules/TypeUtilsKt {
	public static final fun fqNameOrNull (Lorg/jetbrains/kotlin/types/KotlinType;)Lorg/jetbrains/kotlin/name/FqName;
}

